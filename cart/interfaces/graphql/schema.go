// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x4d\x6f\xdc\x38\xd2\xbe\xfb\x57\xd0\x9e\x4b\x4f\x90\x77\x06\xef\x1e\x7d\x6b\x77\x27\x41\x63\xc6\x4e\x62\x3b\xd9\x43\x10\x18\xb4\x54\xdd\xcd\x0d\x45\xca\x24\x65\x5b\x58\xcc\x7f\x5f\xf0\x4b\x22\x29\xea\xc3\x09\x76\x80\xd9\xdd\x39\x4c\x5b\x62\xb1\x58\x64\x3d\x2c\x3e\x55\x54\x54\x5b\x03\xda\xf0\xaa\x02\x51\xc0\xdd\x16\x0a\x2e\xb0\x82\x72\x83\x85\x42\xff\x3c\x41\x08\xa1\x02\x0b\x75\xde\x8b\xe8\x96\x53\xd3\x50\x7a\xe1\x2d\x50\xf2\x08\x82\x80\x3c\x47\x5f\x22\xc1\x6d\x22\xd2\x9e\x7e\x35\x5d\x0f\x30\x6c\xba\x68\x37\xbc\x84\x55\xe9\x1e\xf5\xc3\x39\xba\x51\x82\xb0\xc3\xe9\xcf\x89\x01\x83\xce\x5e\xeb\x9a\xd2\x0f\xb8\xad\x80\xa9\x6b\x78\x68\x88\x80\x72\xa7\xa0\x92\x49\xf7\xbb\x0f\x82\x14\xae\xe9\xb4\x9b\xe4\x4d\x53\x55\x58\xb4\xa9\xac\x7b\x7d\x7a\xf2\xc7\xc9\x49\xbc\x5a\x61\xb3\x5b\xac\x92\xc8\x82\x37\x4c\xa5\x23\xae\xeb\x9a\x12\x28\xb7\xbe\xd9\x8e\x2a\x9b\x2a\x6d\x08\xfa\x19\x23\x13\xb9\x77\x64\xaf\x36\x58\x94\xa3\x72\xef\x04\x66\xe5\x2d\x57\x98\xfe\x9d\xa8\xe3\xac\xb8\x91\xf4\x83\x47\x3d\xd6\x95\x7e\x95\xed\x77\xc4\x72\x68\xf6\x05\xe7\x14\x30\xeb\x26\x76\x8b\x9f\x61\xb0\xee\xe6\xa5\x97\x70\x8e\xba\x01\x0a\x85\x22\x9c\x69\x89\x9b\x9a\x12\xf5\x19\xd3\x06\xec\xf8\x17\xed\x25\xa8\x23\x2f\xe5\xaa\xb2\xbf\xe7\xe8\x8b\xc3\xc4\xd7\x9f\x07\xc6\x65\x3d\xe4\x3c\x43\xca\x73\xb4\xdb\x5a\xf3\x80\x29\xa2\xda\xdd\xb6\xc3\x97\x79\x7b\x4f\x28\x25\xec\xb0\x2e\x4b\x01\x72\xe0\x40\xfb\xd6\x08\xd6\x8d\x28\x8e\x58\x82\x48\x64\x3e\x80\x90\x9c\xb9\xbd\x31\xbe\x25\xa2\x9d\x80\xcb\x92\xe8\xc9\x63\xba\xc5\x0a\x0f\x07\x0d\x1a\xad\x95\x75\xb2\x6a\x03\x68\x27\xed\x76\x6a\x40\x39\x3b\xc8\x5b\xbe\x6e\xd4\x51\xcf\xbe\xd0\x9b\xe7\x93\x99\x42\xe4\x38\x9c\xb6\xa7\x8b\x84\xad\xe3\x37\xbc\xa9\x39\xd3\x7b\x74\x30\xc1\xbe\xc9\x4d\xb1\x84\x3d\x6e\xa8\xda\x34\x42\x00\x2b\xda\x58\x9f\xd2\x00\x24\x76\x8f\xc6\x7a\x6e\x7d\x8b\x53\xa3\xff\xdc\x58\x4c\xee\x98\x0b\x41\xb5\xe0\x65\x53\xa8\xf4\x35\x91\xd1\x2a\x40\x99\xcc\xf2\xd0\x6d\x92\x14\x42\xa7\xd1\xc6\xb8\xc5\xcf\xf9\x6d\xe0\xc5\xee\x8d\xd8\x15\x8c\x08\xe0\xc1\xa6\xfd\x92\x8b\x0a\xbe\x3d\x0c\x8e\xdf\x13\x13\xe3\x50\xb8\x0d\x3a\x85\xdb\xe6\xc4\x0b\x5c\x62\xc2\x6e\x8e\xa4\xae\x09\x3b\xbc\xb9\xc4\x84\xc6\x9e\x21\xf2\x4d\x55\xab\x36\x59\xba\x23\x96\x5e\xf1\x5b\x2e\x26\xad\xeb\xfa\x0d\x67\xa5\x23\xef\x6e\xbb\x22\xe6\x67\x76\x46\xa7\x5e\xc1\xd2\x8e\x5a\xaa\xeb\x64\x5c\xf4\x51\xb5\xab\x0a\x8b\x6f\xa0\x3e\x50\x5c\x40\x64\xea\x6b\xf4\x88\x05\xc1\x4c\xa5\x13\xd8\x31\xd5\x8f\xfc\xe6\x59\x81\x60\x98\x5e\xc3\x1e\x34\x8e\x61\x25\x60\x3f\x63\x81\xef\xfd\x99\x37\xc5\x11\xc4\x0d\x7e\x24\xec\x30\x88\xc5\x9d\xa5\x06\xf5\x90\x09\x2c\x77\xf6\xad\x53\x28\x9b\xca\xbb\x6d\x14\x79\xb1\x8c\x0e\xec\xa3\x27\x4c\xe7\x57\xdf\x61\xc3\xe5\x20\xa0\x63\x4a\x7d\xf3\x2d\x51\x34\x03\x28\xbf\x19\xde\x09\x2e\x47\xc6\x88\x44\x16\xd8\x14\xec\xaf\x45\xd2\xf1\x69\x36\xbd\x73\xab\x2b\xce\xb4\x93\xae\x81\x1a\x1e\xb1\xac\xd3\x0b\x7b\xf4\x07\x65\x1f\x14\x33\xfb\xa2\x63\x2c\x0e\x59\xf1\x3e\xf4\x10\x36\x6c\xe5\xa2\xbd\x6d\x6b\x58\xe9\x53\x2e\x45\xeb\x74\xf4\xec\x43\xde\xe6\x88\xc5\x01\x06\x8b\x78\xe7\xde\x3b\xb3\x7a\xd3\x83\xe8\x95\x46\x82\x6b\xa8\x30\x61\x84\x1d\x72\x32\x79\xba\x14\x30\xaf\x80\x5f\x3a\x92\x96\xcc\xc1\x09\x77\xfb\xc9\xce\x44\x3a\x1c\x4e\xf6\xb9\x09\x84\x5c\x3f\xd5\x2d\x62\xba\x56\xae\x4f\xb7\xca\xa7\x5f\x27\x8d\xf7\xf6\x38\xfb\xf1\x04\x00\x92\x38\x35\xa9\x36\x34\x79\x81\x6a\x1f\x75\x77\x6c\xcf\x23\x28\x4c\x0e\xd2\xcd\x71\xc1\x08\xc5\x02\xad\xb7\xf8\x79\x81\x26\xdd\x31\x06\xb5\x26\xef\xe7\xe8\x2d\xe5\x58\x8d\x6b\x06\x0f\x91\x2c\x3f\xd0\x12\x5f\x83\xa3\xc1\x6e\x0c\xfc\x7c\x1b\x0c\x96\x86\x65\xdd\x67\x74\x2a\x26\xc6\xba\x11\x63\x62\xd1\x9d\x04\xbb\x9e\x83\x98\x47\xf7\x3a\x7f\xd4\x1a\x14\x11\xa6\x40\xec\x71\x31\x70\x47\x42\xd3\xdc\xb8\x07\xac\xe0\x09\xe7\x38\x92\x21\xc5\x23\x8e\xf2\xc4\x79\x08\xec\x64\x94\x3b\x23\x36\x8e\xef\xac\xb8\x33\xed\xa1\xc1\x94\xec\xc9\xf0\x70\xca\xf7\xfa\xe8\xc5\x9d\x8d\x26\xba\x8c\x04\x9d\x51\xcc\x4e\x6b\x76\x86\x0d\xd1\x65\x73\x85\x04\x71\xc3\xe8\x9a\x1f\x74\x6b\xe9\xea\xc0\x41\xa4\xaa\x29\xe8\x57\xf2\x2f\xe0\xca\x41\x82\xec\xf3\x53\xf7\x38\xc9\xb4\xba\xc4\x3e\x1b\x2d\xb7\x61\x6b\x26\x9f\xf7\xe1\xf1\xa2\xdd\x95\x2b\x97\x75\x8d\xe6\xef\x5a\x70\x6c\x06\x59\xc3\x75\xb8\x1b\x31\x5e\x37\x75\x8b\x98\x0d\x19\x23\xa7\x48\xa2\x2f\x0c\xc4\xf3\xd4\x66\x26\xa1\x58\x96\x4f\xcc\xa5\x13\x2f\x20\x38\xdf\xc3\x6f\x5e\x4c\x6f\x5e\x48\xe7\xbe\x83\xcd\x1d\xb1\x74\xe8\x9b\x26\x14\xa1\xf3\x3d\xa1\x88\xce\x2d\xfd\xe6\x89\x8b\x6f\x7b\xca\x9f\xe6\xa3\x44\x81\x85\x30\x21\x2e\x7c\xe9\xb1\xf7\x3b\x2f\x70\x26\xe5\xde\x26\xcd\xae\x8f\x24\x02\xca\x5b\x52\xc1\x39\xd2\xff\xef\x2a\x54\x51\x4e\xbf\xfa\x06\x6d\x48\xe2\xa2\x54\x3b\x92\xfc\x0d\xda\x88\x74\x6b\x89\x9f\x12\xb1\x60\x2d\xe4\x39\xaa\x70\xfd\x45\xda\x93\xe8\x1f\x92\xb3\x5f\xae\xf1\xd3\x25\x48\x89\x0f\xb0\xa0\xf3\x25\xae\x7b\xa9\xd8\xec\x40\x30\x35\xff\x12\xd7\x03\xdb\x03\xf1\x74\x0e\x93\x1e\xf5\xcb\x89\x46\xc3\x3c\x9e\xad\xd4\x34\x12\x2e\x92\xaa\x4e\xc4\x61\x17\x50\x9c\x0c\x2d\x53\x3a\x03\x8a\x4d\xa9\x35\x72\xc7\x36\xae\x9a\xdc\xf6\x78\xbc\x02\x38\x5e\x39\x54\xbe\xc2\xe7\xdf\xef\x58\xa1\xc3\xcb\x08\xff\x8a\x1a\x66\x88\x50\x3a\xe0\x14\x07\x4b\x64\x1d\x2c\xef\xdb\x0d\xae\x6a\x4c\x0e\x26\xe1\x59\x15\xc1\x43\x40\xcc\x96\x4c\xf3\xde\xb2\xba\x3d\xa1\x0a\xc4\x14\xb1\x1b\x76\x5f\x32\xb7\x2e\x03\x09\x0d\x8c\xe3\x41\x90\xb7\xa1\xb8\x89\xe2\x7b\xa0\x96\x07\xa6\x4d\xce\xa5\xbe\x71\x9c\x12\x67\x7b\x13\x19\xc4\xe1\xb4\xb0\xca\x85\x7a\x2f\x4a\x1d\xa1\x1c\x01\x1d\x8d\x8b\xc1\x09\x1b\xb8\x30\x53\xa7\x08\x09\x6f\x84\x1f\xf3\x26\xaf\x3e\xd4\x1a\x16\x56\xd3\x22\x49\x12\x71\x4d\x05\xa6\x1e\x54\x60\x4c\xa3\x2b\xc2\x5c\x8e\x54\x69\x42\x2b\xaf\x70\x95\x34\x48\xde\x88\x02\xd2\x62\xe5\x83\x6a\x83\xaa\xe0\x7c\x3c\x8d\x25\x0c\x4d\x1b\xc8\x2c\x0c\xe1\x5d\x12\x9d\x0e\x9a\x8a\x3b\xf7\xda\x59\x10\x76\xa0\x60\x50\x32\x55\x46\xe9\xa5\x46\xeb\x3f\x82\x3f\xcd\xa9\xf1\x22\x73\xd5\xcb\x97\x05\xa6\x9f\x9c\xea\xb4\xfc\x6f\x9e\xc7\x76\xa5\x8d\xcd\x0e\x4f\x8f\x58\x05\x1b\x23\xbf\x45\xf6\x44\x48\xc5\x0c\x0a\x46\x65\x28\xce\x8a\xc4\x80\x24\x65\x49\xe1\x6a\x20\x15\x51\x76\x1b\xed\x27\xed\x91\x98\x36\xca\x71\x83\x51\x19\x25\x00\x32\x53\x1b\xca\x5c\x89\x29\x9b\x7b\x90\xba\x75\xfb\x9d\xb0\x21\x4c\x0b\x5e\xd5\x98\xb5\x83\xe1\xa2\xe0\x46\xd4\x50\x20\x91\xa9\xb9\x54\x5d\xf8\x1b\xb5\xda\x64\xf3\x93\x7a\x04\x1c\x48\x10\x48\xf3\xf6\x68\x1c\x89\x19\x9b\xad\xcc\x40\x51\xe4\x31\xa0\x50\x1f\x39\x9b\x42\x07\x54\xa6\xe0\x3d\x6a\x73\x16\xa8\xf6\x82\xc7\x17\x3c\xe6\xef\x89\x8c\xb8\xa6\x40\x0a\x13\x9a\x4a\x7e\x88\x5b\x7d\x00\x25\x52\x11\x76\xd8\x34\x52\xf1\x0a\x44\xe6\x52\xe8\x4d\x46\x24\x6f\x6e\x4e\x32\x09\xda\x13\xd3\xec\x2c\xf3\x19\x18\x56\xf0\x7e\x7f\x41\x84\x3a\x26\x41\x19\x4b\x59\x73\x61\x8b\x25\xa2\xcd\x37\x5e\x35\xd5\x7d\xca\xab\x19\xb6\x38\x36\x30\x9c\x5c\xf8\x38\x8a\x3a\x83\x4c\xa8\x29\xcc\xdc\xd6\x4a\x09\x72\xdf\x28\x08\x98\xab\x00\x09\xe2\x11\x4a\x73\x5c\xce\x16\xe1\xba\x7a\xe9\x68\x12\x31\xc6\xfa\x96\x94\xbc\xb2\x43\xf6\x35\xe1\xec\x98\x53\x04\xc6\xd7\x5b\x47\x8d\xed\x18\x48\x36\xf2\xfb\xb2\xed\x68\xea\x75\xdd\x4b\xcc\xd4\x73\x3f\x63\x4a\x4a\xe3\xc7\x6b\x90\x0d\xf5\x94\xea\x88\xa5\x96\xe3\xec\x8d\x10\xbc\x0f\x67\x09\xf9\xee\x04\x5c\x5e\xf2\x1b\x24\xe8\x21\x86\x08\x69\xbd\x32\xdc\xab\x49\x69\x44\x93\x91\xde\x0e\xa3\x70\xb4\xc4\x95\x91\x0d\xd8\x91\x86\x49\x3e\x5c\x8c\x59\xf9\xc7\x49\x76\x98\x8f\xaa\xbd\x06\x9d\x7c\x15\x83\xa5\x21\xd2\xb7\xf4\x0c\x31\x5e\x98\x0a\x3f\xaf\x29\xe5\x4f\x41\x3b\xea\x69\x4c\xe7\xbd\x2d\xd9\x77\x2c\x2b\x68\xb5\xba\xb9\x08\x4e\xb5\x99\xca\xb0\xe6\x5a\x6e\x9b\xf4\x59\x34\xd7\xcf\x7e\xd7\x26\xab\x11\xdf\xf8\xcd\xe9\x8f\x33\xb0\xb7\x5c\xf8\x3d\x76\xe6\x5a\x7c\x28\x45\x7b\xdd\x56\x62\x85\xcf\xec\x29\xcf\x45\x65\x03\xa0\xfd\x2f\x56\x1b\xe8\xb3\xda\x7a\xb7\x22\xbe\x47\xb2\xb1\x5b\xc0\x5f\xeb\xfb\x41\x5e\x23\xa8\x6a\xd5\x22\xb2\xef\x86\x25\x12\x3d\xea\xbe\x67\x8e\x7f\x78\x35\x99\x5a\xd3\x9d\x1e\x2e\x00\x7d\x57\x73\x3a\xbb\x39\xf2\x27\xa9\xb5\xaa\x23\x20\x01\x0f\x0d\x48\x85\x9e\xb0\x44\xb2\x29\x0a\x90\x72\xdf\x50\xda\x6a\x02\xab\x1f\xc0\x8d\xd5\x3d\xf6\x3c\x70\xe4\x2b\x13\x77\x91\xdd\x5d\x15\x05\x80\xfa\x3e\x83\x17\x0f\x9d\x51\xe0\xfd\xf7\x96\x00\x2d\x91\xac\xa1\x20\x7b\x52\x04\x86\xd8\xfd\x22\x9d\x1b\xb5\x94\xd9\x69\xc3\x1a\xbe\x51\xfe\xb6\x13\x70\xe4\xe5\xec\x1d\x30\x10\x98\x8e\x69\x3c\xd8\xe6\x29\x9d\xd3\x51\xa0\x17\xf1\x53\x59\xa3\x6f\xd0\x6a\xdc\x68\xf7\x99\xb1\x50\x65\xb7\xfb\x2f\xe8\xfd\x5e\x01\x43\x8d\x84\x52\x43\x12\x29\x81\x99\xa4\xc6\xaa\x33\x57\x48\xca\x47\xaf\xb3\xb5\x5e\x1b\xfc\x4d\xa3\xcf\xaa\x34\x39\x63\xa4\x50\x71\x24\x8f\xfc\x49\xff\x02\x2b\xf5\x3b\x81\xfe\x0f\x11\x86\x0a\x2c\x01\x31\x1e\x8e\x66\xd9\x81\x5b\x03\xf7\x55\xc5\xef\x36\x0b\x9d\xde\x81\xc9\x2a\xff\x87\xcd\xd9\x0c\xbb\x2b\x81\x29\x7b\x2b\xa0\xed\xc5\x36\x96\x18\xe8\x05\x28\x8c\x13\xc7\xfc\x62\x0d\xe3\xd4\xff\x32\x92\xd9\x8c\xc4\xe7\x21\xff\x7f\x3e\x2f\xf3\xb7\x31\x99\xff\xe6\x9c\xc5\xe4\x2b\xc1\x71\x9b\x93\x59\x90\xb3\x10\x56\x37\x6a\x1c\xd0\x3b\xd3\xbc\x04\xd5\x7f\x22\xa8\x17\x60\x7a\x01\xa4\x17\x20\x7a\x01\xa0\x17\xe0\x79\x01\x9c\x17\xa0\x79\x01\x98\x17\x60\x79\x01\x94\x17\x20\x79\x01\x90\x17\xe0\x78\x01\x8c\x7f\x04\xc5\xfe\x5a\xc0\xa1\x39\x44\xf2\xd9\x27\x46\x1e\x1a\xe8\x68\xa9\xc9\x87\xf4\xe9\x42\xec\xa1\xd0\x9a\x03\xce\xb7\x9e\x65\x28\x6c\x74\x94\x74\x37\x8f\x23\xb4\xb4\x8c\x2d\x49\x09\x57\xba\xdd\x3a\x7a\xd8\xd0\xd2\x1a\xa2\x53\x58\x77\xea\x26\xe4\x14\xdd\x43\x70\xe6\x1e\x89\x4c\xac\x9e\xbb\xcf\x38\x7b\x5f\xdb\x34\x19\xf9\x6b\x0b\x64\xbf\x9f\xf5\x87\x76\x78\xe3\xb5\xa4\x47\x72\x1f\x96\x74\x71\x97\x5c\xfd\xc2\x97\x58\x01\xfa\x15\x29\x52\x81\x5f\xab\xf4\x1a\x6c\xec\xd2\x3d\x5a\xd3\x30\x49\xf8\x73\x9d\xfb\xc2\x9c\x23\x62\xfd\x53\x8e\x95\xd6\xff\x3f\xea\xdf\xc5\x6e\xed\x04\x37\xd6\x83\xff\x2e\x77\x4e\xa6\x5e\x65\xb2\xd8\x7f\x81\xdc\x6b\x2a\xf4\xf8\x35\xb5\x0b\xb6\x18\x9f\x98\xa1\x57\xaf\x7c\x61\xef\xd5\xab\xe5\x58\x5d\xe0\xec\x54\x72\xca\xdb\x26\xb4\xc2\xb3\xd2\x9c\xdb\x6c\xc1\x8f\x4d\xff\x7d\x45\x34\xe3\x60\xe1\xa3\xcf\x3a\x4e\x87\xa2\xde\x1f\x7c\xf0\x59\x50\x5a\x19\x72\xa6\x4e\xd5\x49\x90\x00\xd5\x08\xd6\xb9\xd2\x5d\xf7\x68\x90\x88\xae\x66\xa2\x13\x05\x05\xa2\x92\x7e\xab\x61\x5b\x2b\x41\x0f\x0d\x36\xdf\xf5\xbb\xcd\x05\xa8\x30\x5f\x9c\x2b\xf3\x3d\x08\xc2\xcc\x46\xdf\x03\x79\x04\x96\xf8\x60\xca\xa6\xd5\xd8\xa5\x55\xf6\xb3\xe1\xd7\x79\x7f\x0e\xbe\x43\xcb\xd5\x87\x06\xfe\xb9\x74\x74\x27\x75\xd1\xba\x2c\x6f\xb9\x56\x33\xb4\x6d\xb7\x3d\x7d\xdd\x5f\x7b\x2d\xb0\x66\xca\xbf\x5b\xa0\xa0\x20\xbc\x93\x9f\xff\x12\x7d\x5e\xdf\x4e\x41\xd5\x7d\xc0\x6d\xec\xfd\x21\xa5\x9f\x6a\x1d\xa5\xb4\xd2\x8f\xaa\x5d\xa0\x37\x58\x9e\x99\x21\xce\xd6\x65\x29\x7f\xb5\xfa\xa5\xc1\x8e\xaf\x57\xf9\x0b\x2b\x07\xc0\x10\x67\x39\x40\x59\x15\x71\x60\x5f\xe1\xfe\x28\x99\x63\x10\x03\xf4\x0c\x2b\x6a\xb9\x9d\x69\x87\x4d\x2a\x47\xab\xf4\xb3\xb4\xd7\x69\x44\x19\x8c\x96\xad\x3d\xe5\x06\x5c\xd7\x35\x6d\xfb\xaa\xf6\x7b\xe1\xcb\xd4\xab\x62\x91\x67\x33\x2a\xaf\xa1\xe2\x8f\xd0\xe9\x39\xb8\x3f\x96\x21\x65\x54\x5f\x6f\xe3\x2a\xbc\xe0\x5f\xa4\x2f\x46\x05\x67\xf0\x6b\xd5\x50\x45\x6a\x0a\xdd\x67\xa0\x1e\x1f\x20\xc7\xd1\x90\x10\x1e\x90\xab\x9e\x56\xda\x17\x83\xba\x56\x8e\x01\x9b\x7f\x05\x35\x2d\xa7\xe1\xf1\x35\x87\xe8\x1f\xb6\x3d\x3e\x0f\xe5\x4a\xc6\xcf\xa3\x86\xc5\xfd\x5e\x38\x85\x8d\x3e\xa9\xe5\xec\x9e\x33\x62\xd1\xed\xc5\xbf\x02\x00\x00\xff\xff\x5c\x8d\x45\x9a\xea\x38\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
