// Package graphql Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5b\x5f\x6f\xdc\xb8\x11\x7f\xf7\xa7\xa0\xdd\x97\xbd\x20\xbd\x43\xfb\xe8\xb7\xf5\x6e\x12\x2c\x2e\x76\x12\xdb\x49\x1f\x82\xc0\xa0\xa5\xd9\x5d\x36\x14\x29\x93\x94\x6d\xa1\xc8\x77\x2f\xf8\x4f\x22\x29\xea\x4f\x12\xe0\x80\x6b\xaf\x0f\x75\x56\x1c\x0e\x87\x9c\xdf\x0c\x7f\x33\xd2\xa9\xb6\x06\xb4\xe1\x55\x05\xa2\x80\xbb\x2d\x14\x5c\x60\x05\xe5\x06\x0b\x85\xfe\x73\x82\x10\x42\x05\x16\xea\xbc\x17\xd1\x23\xa7\x66\xa0\xf4\xc2\x5b\xa0\xe4\x11\x04\x01\x79\x8e\x3e\x47\x82\xdb\x44\xa4\x3d\xfd\x62\xa6\x1e\x60\x38\x74\xd1\x6e\x78\x09\xab\xd2\xfd\xd4\x3f\xce\xd1\x8d\x12\x84\x1d\x4e\x7f\x49\x0c\x18\x4c\xf6\x5a\xd7\x94\xbe\xc7\x6d\x05\x4c\x5d\xc3\x43\x43\x04\x94\x3b\x05\x95\x4c\xa6\xdf\xbd\x17\xa4\x70\x43\xa7\xdd\x26\x6f\x9a\xaa\xc2\xa2\x4d\x65\xdd\xe3\xd3\x93\x6f\x27\x27\xf1\x69\x85\xc3\xee\xb0\x4a\x22\x0b\xde\x30\x95\xae\xb8\xae\x6b\x4a\xa0\xdc\xfa\x61\x23\x2c\x9b\x2a\x7d\x1e\x4c\x33\x36\x26\x72\x6f\xc8\x5e\x6d\xb0\x28\x47\xe5\xde\x08\xcc\xca\x5b\xae\x30\xfd\x17\x51\xc7\x59\x71\x23\xe9\x17\x8f\x66\xac\x2b\xfd\x28\x3b\xef\x88\xe5\xd0\xec\x0b\xce\x29\x60\x76\xda\x69\xc6\xcf\x30\x38\x76\xf3\xd0\x4b\x38\x3f\xdd\x00\x85\x42\x11\xce\xb4\xc4\x4d\x4d\x89\xfa\x84\x69\x03\x76\xfd\x8b\xf6\x12\xd4\x91\x97\x72\x55\xd9\xbf\xe7\xe8\xb3\x83\xc4\x97\x5f\x06\xc6\x65\x1d\xe4\x1c\x43\xca\x73\xb4\xdb\x5a\xf3\x80\x29\xa2\xda\xdd\xb6\x83\x97\x79\x7a\x4f\x28\x25\xec\xb0\x2e\x4b\x01\x72\xe0\x3f\xfb\xd4\x08\xd6\x8d\x28\x8e\x58\x82\x48\x64\xde\x83\x90\x9c\xb9\xd0\x18\x8f\x88\x28\x10\x70\x59\x12\xbd\x79\x4c\xb7\x58\xe1\xe1\xa2\xc1\xa0\xb5\xb2\x4e\x4e\x6d\x80\xec\x64\xdc\x6e\x0d\x28\x67\x07\x79\xcb\xd7\x8d\x3a\xea\xdd\x17\x3a\x76\x3e\x9a\x2d\x44\x8e\xc3\xe9\x78\x7a\x48\xd8\x3a\x7e\xc3\x9b\x9a\x33\x1d\xa2\x83\x0d\xf6\x43\x6e\x8b\x25\xec\x71\x43\xd5\xa6\x11\x02\x58\xd1\xc6\xfa\x94\x06\x20\xb1\x21\x1a\xeb\xb9\xf5\x23\x4e\x8d\xfe\xe7\xc6\x62\x72\xc7\x5c\x06\xaa\x05\x2f\x9b\x42\xa5\x8f\x89\x8c\x4e\x01\xca\x64\x97\x87\x2e\x48\x52\x08\x9d\x46\x81\x71\x8b\x9f\xf3\x61\xe0\xc5\xee\x8d\xd8\x15\x8c\x08\xe0\x41\xd0\x7e\xce\x25\x05\x3f\x1e\xe6\xc6\x1f\x49\x89\x71\x26\xdc\x06\x93\xc2\xb0\x39\xf1\x02\x97\x98\xb0\x9b\x23\xa9\x6b\xc2\x0e\xaf\x2e\x31\xa1\xb1\x67\x88\x7c\x55\xd5\xaa\x4d\x8e\xee\x88\xa5\x57\xfc\x9a\x8b\x49\xeb\xba\x79\xc3\x5d\xe9\xc4\xbb\xdb\xae\x88\xf9\x33\xbb\xa3\x53\xaf\x60\xe9\x44\x2d\xd5\x4d\x32\x2e\xfa\xa0\xda\x55\x85\xc5\x57\x50\xef\x29\x2e\x20\x32\xf5\x25\x7a\xc4\x82\x60\xa6\xd2\x0d\xec\x98\xea\x57\x7e\xf5\xac\x40\x30\x4c\xaf\x61\x0f\x1a\xc7\xb0\x12\xb0\x9f\xb1\xc0\xcf\xfe\xc4\x9b\xe2\x08\xe2\x06\x3f\x12\x76\x18\xe4\xe2\xce\x52\x83\x7a\xc8\x24\x96\x3b\xfb\xd4\x29\x94\x4d\xe5\xdd\x36\x8a\xbc\x58\x46\x27\xf6\xd1\x1b\xa6\xf3\xab\x9f\xb0\xe1\x72\x90\xd0\x31\xa5\x7e\xf8\x96\x28\x9a\x01\x94\x0f\x86\x37\x82\xcb\x91\x35\x22\x91\x05\x36\x05\xf1\xb5\x48\x3a\xbe\xcd\xa6\x23\xb7\xba\xe2\x4c\x3b\xe9\x1a\xa8\xa1\x11\xcb\x26\x7d\xe7\x8c\xfe\xa2\xec\x93\x62\x26\x2e\x3a\xc2\xe2\x90\x15\xc7\xa1\x87\xb0\x21\x2b\x17\xed\x6d\x5b\xc3\x4a\xdf\x72\x29\x5a\xa7\xb3\x67\x9f\xf2\x36\x47\x2c\x0e\x30\x38\xc4\x3b\xf7\xdc\x99\xd5\x9b\x1e\x64\xaf\x34\x13\x5c\x43\x85\x09\x23\xec\x90\x93\xc9\xb3\xa5\x80\x78\x05\xf4\xd2\x71\xb4\x64\x0f\x4e\xb8\x8b\x27\xbb\x13\xe9\x70\x38\x39\xe7\x26\x10\x72\xf3\x54\x77\x88\xe9\x59\xb9\x39\xdd\x29\x9f\x7e\x99\x34\xde\xdb\xe3\xec\xc7\x13\x00\x48\xf2\xd4\xa4\xda\xd0\xe4\x05\xaa\x7d\xd6\xdd\xb1\x3d\x8f\xa0\x30\xb9\x48\xb7\xc7\x05\x2b\x14\x0b\xb4\xde\xe2\xe7\x05\x9a\xf4\xc4\x18\xd4\x9a\xbb\x9f\xa3\xd7\x94\x63\x35\xae\x19\x3c\x44\xb2\xfc\x40\x4b\x7c\x09\xae\x06\x1b\x18\xf8\xf9\x36\x58\x2c\x4d\xcb\x7a\xce\xe8\x56\x4c\x8e\x75\x2b\xc6\xc4\xa2\xbb\x09\x76\x3d\x07\x31\x3f\xdd\xe3\xfc\x55\x6b\x50\x44\x98\x02\xb1\xc7\xc5\xc0\x1d\x09\x4d\x73\xeb\x1e\xb0\x82\x27\x9c\xe3\x48\x86\x14\x8f\x38\xca\x13\xe7\x21\xb0\x93\x55\xee\x8c\xd8\x38\xbe\xb3\xe2\xce\xb4\x87\x06\x53\xb2\x27\xc3\xcb\x29\x3f\xeb\x83\x17\x77\x36\x9a\xec\x32\x92\x74\x46\x31\x3b\xad\xd9\x19\x36\x44\x97\xad\x15\x12\xc4\x0d\xb3\x6b\x7e\xd1\xad\xa5\xab\x03\x07\x91\xaa\xa6\xa0\x1f\xc9\x3f\x81\x2b\x07\xf5\xb1\x2f\x4f\xdd\xcf\x49\xa6\xd5\xd5\xf5\xd9\x6c\xb9\x0d\x47\x33\xe5\xbc\x4f\x8f\x17\xed\xae\x5c\xb9\xaa\x6b\xb4\x7c\xd7\x82\x63\x3b\xc8\x1a\xae\xd3\xdd\x88\xf1\x7a\xa8\x3b\xc4\x6c\xca\x18\xb9\x45\x12\x7d\x61\x22\x9e\xa7\x36\x33\x05\xc5\xb2\x7a\x62\xae\x9c\xf8\x0e\x82\xf3\x23\xfc\xe6\xbb\xe9\xcd\x77\xd2\xb9\x1f\x60\x73\x47\x2c\x1d\xfa\xa6\x09\x45\xe8\x7c\x4f\x28\xa2\x7b\x4b\x3f\x79\xe2\xe2\xeb\x9e\xf2\xa7\xf9\x2c\x51\x60\x21\x4c\x8a\x0b\x1f\x7a\xec\xbd\xe5\x05\xce\x94\xdc\xdb\x64\xd8\xcd\x91\x44\x40\x79\x4b\x2a\x38\x47\xfa\xff\xbb\x06\x55\x54\xd3\xaf\xbe\x42\x1b\x92\xb8\xa8\xd4\x8e\x24\x7f\x87\x36\x22\xdd\x5a\xe2\x6f\x89\x58\x70\x16\xf2\x1c\x55\xb8\xfe\x2c\xed\x4d\xf4\x6f\xc9\xd9\xaf\xd7\xf8\xe9\x12\xa4\xc4\x07\x58\x30\xf9\x12\xd7\xbd\x54\x6c\x76\x20\x98\x9a\x7f\x89\xeb\x81\xed\x81\x78\xba\x87\x49\x8f\xfa\xe3\x44\xa3\x69\x1e\xcf\x76\x6a\x1a\x09\x17\x49\x57\x27\xe2\xb0\x0b\x28\x4e\x86\x96\x29\x5d\x01\xc5\xa6\xd4\x1a\xb9\x63\x81\xab\x26\xc3\x1e\x8f\x77\x00\x73\x8d\xc3\xe0\x1e\x09\xc3\x68\xc7\x0a\x9d\x5e\x46\xf8\x57\x34\x30\x43\x84\xd2\x05\xa7\x38\x58\x22\xeb\x60\x79\xdf\x6e\x70\x55\x63\x72\x30\x05\xcf\xaa\x08\x7e\x04\xc4\x6c\xc9\x36\xef\x2d\xab\xdb\x13\xaa\x40\x4c\x11\xbb\xe1\xf4\x25\x7b\xeb\x2a\x90\xd0\xc0\x38\x1f\x04\x75\x1b\x8a\x87\x28\xbe\x07\x6a\x79\x60\x3a\xe4\x5c\xea\x07\xc7\x29\x71\x76\x36\x91\x41\x1e\x4e\x1b\xab\x5c\xa8\x77\xa2\xd4\x19\xca\x11\xd0\xd1\xbc\x18\xdc\xb0\x81\x0b\x33\x7d\x8a\x90\xf0\x46\xf8\x31\x4f\xf2\xea\x43\xad\x61\x63\x35\x6d\x92\x24\x19\xd7\x74\x60\xea\x41\x07\xc6\x0c\xba\x26\xcc\xe5\x48\x97\x26\xb4\xf2\x0a\x57\xc9\x80\xe4\x8d\x28\x20\x6d\x56\x3e\xa8\x36\xe8\x0a\xce\xe7\xd3\x58\xc2\xd0\xb4\x81\xcc\xc2\x14\xde\x15\xd1\xe9\xa2\xa9\xb8\x73\xaf\xdd\x05\x61\x07\x0a\x06\x25\x53\x6d\x94\x5e\x6a\xb4\xff\x23\xf8\xd3\x9c\x1a\x2f\x32\xd7\xbd\x5c\x9a\x98\xfa\xeb\x42\xf0\xa7\xb4\xfb\x6f\x7e\x8f\x05\xa5\x4d\xcd\x0e\x4e\x8f\x58\x05\x71\x91\x8f\x90\x3d\x11\x52\x31\x03\x82\x51\x19\x8a\xb3\x22\x31\x1e\x49\x59\x52\xb8\x1a\x48\x45\x8c\xdd\x26\xfb\x49\x7b\x24\xa6\x8d\x72\xd4\x60\x54\x46\x09\x80\xcc\xd6\x86\x32\x57\x62\xca\xe6\x1e\xa3\xee\xdc\xde\x12\x36\x44\x69\xc1\xab\x1a\xb3\x76\xb0\x5c\x94\xdb\x88\x1a\x0a\x24\x32\x35\x97\xaa\xcb\x7e\xa3\x56\x9b\x62\x7e\x52\x8f\x80\x03\x09\xf2\x68\xde\x1e\x0d\x23\x31\x63\xb3\x95\x19\x28\x8a\x3c\x06\x14\xea\x23\x67\x53\xe8\x80\xca\xf4\xbb\x47\x6d\xce\x02\xd5\xbe\xdf\xf1\xfd\x8e\xf9\xd7\x44\x46\x5c\x33\x20\x85\x09\x4d\x25\xdf\xc7\xa3\x3e\x7f\x12\xa9\x08\x3b\x6c\x1a\xa9\x78\x05\x22\xf3\x4e\xe8\x55\x46\x24\x6f\x6e\x4e\x32\xc9\xd9\x13\xdb\xec\x2c\xf3\x05\x18\x56\xf0\x6e\x7f\x41\x84\x3a\x26\x39\x19\x4b\x59\x73\x61\x7b\x25\xa2\xcd\x0f\x5e\x35\xd5\x7d\x4a\xab\x19\xb6\x38\x36\x30\x9c\x3c\xf8\x38\x89\x3a\x83\x4c\xaa\x29\xcc\xde\xd6\x4a\x09\x72\xdf\x28\x08\x88\xab\x00\x09\xe2\x11\x4a\x73\x5b\xce\xf6\xe0\xba\x76\xe9\x68\x0d\x31\x46\xfa\x96\x74\xbc\xb2\x4b\xf6\x2d\xe1\xec\x9a\x53\xfc\xc5\xb7\x5b\x47\x8d\xed\x08\x48\x36\xf1\xfb\xae\xed\x68\xe5\x75\xdd\x4b\xcc\xb4\x73\x3f\x61\x4a\x4a\xe3\xc7\x6b\x90\x0d\xf5\x8c\xea\x88\xa5\x96\xe3\xec\x95\x10\xbc\x4f\x67\x09\xf7\xee\x04\x5c\x59\xf2\x3b\x24\xe8\x21\x86\x07\x69\xbd\x32\x8c\xd5\xa4\x33\xa2\xb9\x48\x6f\x87\x51\x38\xda\xe1\xca\xc8\x06\xe4\x48\xc3\x24\x9f\x2e\xc6\xac\xfc\x76\x92\x5d\xe6\x83\x6a\xaf\x41\xd7\x5e\xc5\xe0\x68\x88\xf4\x23\x3d\x41\x8c\x0f\xa6\xc2\xcf\x6b\x4a\xf9\x53\x30\x8e\x7a\x16\xd3\x79\x6f\x4b\xf6\x1d\xc9\x0a\x46\xad\x6e\x2e\x82\x5b\x6d\xa6\x31\xac\xa9\x96\x0b\x93\xbe\x88\xe6\xfa\xb7\x8f\xda\xe4\x34\xe2\x17\x7e\x73\xfa\xe3\x02\xec\x35\x17\x3e\xc6\xce\xdc\x88\x4f\xa5\x68\xaf\xc7\x4a\xac\xf0\x99\xbd\xe5\xb9\xa8\x6c\x02\xb4\xff\x8b\xd5\x06\xfa\xac\xb6\xde\xad\x88\xef\x91\x6c\x6c\x08\xf8\xb7\xfa\x7e\x91\x97\x08\xaa\x5a\xb5\x88\xec\xbb\x65\x89\x44\x8f\x7a\xee\x99\xe3\x1f\x5e\x4d\xa6\xd5\x74\xa7\x97\x0b\x40\xdf\xb5\x9c\xce\x6e\x8e\xfc\x49\x6a\xad\xea\x08\x48\xc0\x43\x03\x52\xa1\x27\x2c\x91\x6c\x8a\x02\xa4\xdc\x37\x94\xb6\x9a\xbf\xea\x1f\xe0\xd6\xea\x7e\xf6\x34\x70\xe4\x1b\x13\xf7\x1e\xbb\x7b\x53\x14\x00\xea\xc7\x0c\x5e\xbc\x74\x46\x81\xf7\xdf\x6b\x02\xb4\x44\xb2\x86\x82\xec\x49\x11\x18\x62\xe3\x45\x3a\x37\x6a\x29\x13\x69\xc3\x16\xbe\x51\xfe\xba\x13\x70\xe4\xe5\xec\x0d\x30\x10\x98\x8e\x69\x3c\xd8\xe1\x29\x9d\xd3\x59\xa0\x17\xf1\x5b\x59\xa3\xaf\xd0\x6a\xdc\x68\xf7\x99\xb5\x50\x65\xc3\xfd\x57\xf4\x6e\xaf\x80\xa1\x46\x42\xa9\x21\x89\x94\xc0\x4c\x52\x63\xd5\x99\xeb\x23\xe5\xb3\xd7\xd9\x5a\x9f\x0d\xfe\xaa\xd1\x67\x55\x9a\x92\x31\x52\xa8\x38\x92\x47\xfe\xa4\xff\x02\x2b\xf5\x33\x81\xfe\x8e\x08\x43\x05\x96\x80\x18\x0f\x57\xb3\xec\xc0\x9d\x81\xfb\xa8\xe2\xad\x2d\x42\xa7\x23\x30\x39\xe5\xff\xb1\x3d\x9b\x65\x77\x25\x30\x65\x5f\x0a\x68\x7b\xb1\xcd\x25\x06\x7a\x01\x0a\xe3\xba\x31\x7f\x58\xc3\x3c\xf5\x57\x45\x32\x5b\x91\xf8\x3a\xe4\x1f\xe7\xf3\x32\xff\x1c\x93\xf9\x7f\xae\x59\x4c\xbd\x12\x5c\xb7\x39\x99\x05\x35\x0b\x61\x75\xa3\xc6\x01\xbd\x33\xc3\x4b\x50\xfd\x07\x82\x7a\x01\xa6\x17\x40\x7a\x01\xa2\x17\x00\x7a\x01\x9e\x17\xc0\x79\x01\x9a\x17\x80\x79\x01\x96\x17\x40\x79\x01\x92\x17\x00\x79\x01\x8e\x17\xc0\xf8\x67\x50\xec\xdf\x0a\x38\x34\x87\x48\x3e\xfb\xc8\xc8\x43\x03\x1d\x2d\x35\xf5\x90\xbe\x5d\x88\xbd\x14\x5a\x73\xc1\xf9\xd1\xb3\x0c\x85\x8d\xae\x92\xee\xc5\xe3\x08\x2d\x2d\x63\x4b\x52\xc2\x95\x86\x5b\x47\x0f\x1b\x5a\x5a\x43\x74\x09\xeb\x6e\xdd\x84\x9c\xa2\x7b\x08\xee\xdc\x23\x91\x89\xd5\x73\xaf\x33\xce\xde\xd5\xb6\x4c\x46\xfe\xad\x05\xb2\x9f\xcf\xfa\x4b\x3b\x7c\xe1\xb5\x64\x46\xf2\x3a\x6c\xf4\x8d\x79\x74\x22\x21\xc5\xff\x63\x5d\xf3\x9d\x15\x43\xc4\xd9\xa7\xdc\x22\xad\xf7\x7e\xd6\x3b\x8b\x9d\xd2\x09\x6e\xec\xf9\xe7\x9d\x81\x26\xaa\x9e\x32\x39\xa9\x3f\x41\xd9\x33\x15\xf5\xfe\x40\x2c\x5a\x17\x83\x0b\x33\xf4\xe2\x85\xef\xa9\xbd\x78\xb1\x1c\x68\x0b\x3c\x95\x4a\x4e\xb9\xca\x64\x35\x78\x56\x9a\xee\x9a\xf8\xf9\xd0\xf4\x5f\x36\x44\x3b\x0e\x0e\x3e\xfa\xa0\xe2\x74\x28\xea\xfd\xc1\x07\x1f\xe4\xa4\x4d\x19\x67\xea\x54\x8b\x02\x09\x50\x8d\x60\x9d\x2b\xdd\x8b\x16\x0d\x12\xd1\xb5\x2b\x34\x47\x57\x20\x2a\xe9\xe3\x04\xdb\x36\x05\x7a\x68\xb0\xf9\xa2\xde\x45\x06\xa0\xc2\x7c\xeb\xad\xcc\x97\x18\x08\x33\x9b\xf8\x0e\xe4\x11\x58\xe2\x83\x29\x9b\x56\x63\xaf\x8b\xb2\x1f\xec\xbe\xcc\xfb\x73\xf0\x05\x58\xae\x35\x33\xf0\xcf\xa5\x63\x1a\xa9\x8b\xd6\x65\x79\xcb\xb5\x9a\xa1\x6d\xbb\xed\xe9\xcb\xfe\x85\xd3\x02\x6b\xa6\xfc\xbb\x05\x0a\x0a\xc2\xb7\xe1\xf3\xdf\x80\xcf\xeb\xdb\x29\xa8\xba\x4f\xa7\x8d\xbd\x3f\xa5\xf4\x63\x5d\x62\xab\xf4\x83\x6a\x17\xe8\x0d\x8e\x67\x66\x89\xb3\x75\x59\xca\xdf\xac\x7e\x69\xb0\xe3\x5b\x45\xfe\x5d\x91\x03\x60\x88\xb3\x1c\xa0\xac\x8a\x38\x2b\xaf\x70\x7f\x0f\xcc\x5d\xde\x03\xf4\x0c\x9b\x59\xb9\xc8\xb4\xcb\x26\x4d\x9b\x55\xfa\x41\xd8\xcb\x34\xa3\x0c\x56\xcb\xb6\x7d\x72\x0b\xae\xeb\x9a\xb6\x7d\x43\xf9\x9d\xf0\x1d\xe2\x55\xb1\xc8\xb3\x19\x95\xd7\x50\xf1\x47\xe8\xf4\x1c\xdc\x3f\x96\x21\x65\x54\x5f\x6f\xe3\x2a\x7c\xb5\xbe\x48\x5f\x8c\x0a\xce\xe0\xb7\xaa\xa1\x8a\xd4\x14\xba\x0f\x30\x3d\x3e\x40\x8e\xa3\x21\x61\x2b\x20\x57\x3d\xa3\xb3\x0f\x06\x2d\xa5\x1c\xf9\x34\xff\xfd\xd1\xb4\x9c\x86\xc7\x97\x1c\xa2\x7f\xda\xf6\xf8\x3e\x94\x2b\x19\xff\x1e\x35\x2c\x9e\xb7\x7c\x0b\xdf\x4e\xfe\x1b\x00\x00\xff\xff\x42\x9b\xdb\xe3\x27\x38\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
