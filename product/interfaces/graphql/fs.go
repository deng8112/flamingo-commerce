// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5f\x6f\xdb\x36\x10\x7f\x9e\x3f\x05\xed\xbd\xa4\x40\xd0\x0f\xe0\x37\xc7\x6b\xb7\xa0\xf5\x9a\xd5\x5e\x5f\x8a\xc2\xb8\x50\x67\x99\x08\x45\x6a\xe4\x29\x8d\x30\xec\xbb\x0f\xa4\x28\x5b\x7f\x48\x2b\xc1\x80\xf5\x25\x7a\x92\xee\x7e\x77\x3c\xde\x7f\x09\x45\x68\x0e\xc0\x91\xad\x75\x51\xa0\xe1\xb8\xbf\x33\x3a\xab\x38\xb1\xbf\x67\x8c\x31\x46\x75\x89\x4b\xb6\x25\x23\x54\x3e\xf7\x94\x02\xcc\x03\xd2\x9d\x04\x8e\x6b\x9d\x0d\x99\x98\x09\x58\x8e\x94\xed\x37\x8e\x3e\xbf\xf6\x98\xd2\x08\x8e\x11\xcc\x9d\xa3\xdf\xaa\x83\x0e\x38\x12\x24\x07\xea\x39\x10\xe6\xda\x08\xb4\x11\xf9\xf5\x89\xd9\x80\x33\xb4\xdc\x88\x92\x84\x56\x43\x23\x29\x6e\x23\x41\x03\x90\xba\x06\x49\x75\x04\xf3\xb1\xe1\x34\x30\x20\x32\xe2\xbe\xa2\xa8\x35\xab\x13\x73\x3e\xfb\x67\x36\x9b\x39\x47\x8e\x51\x5b\x51\x94\x12\x5b\x97\xfb\x8f\x02\x15\xd9\xd7\x70\xfc\x90\x70\xac\xb5\x3a\x88\xbc\x32\x70\xff\x1a\x94\xff\x39\x28\x0e\xfc\x08\x46\x80\xb3\x65\x8b\x12\xb9\x7b\xb1\x4b\xf6\x75\x24\xf6\x65\x04\x9b\x7f\xbb\x10\xd4\x15\x27\xf1\x88\x5e\x48\xd1\x6b\x54\x7f\x4c\x54\x15\x6d\x2e\x79\xef\xbf\x44\xde\x1b\x74\x8e\xf1\xb4\x96\x55\x02\xdc\x64\x51\x3c\x89\xc6\xe8\x90\x26\x7c\x74\x17\x09\xf7\x28\xfb\x24\x5d\xbe\xe0\x4a\xfb\x4f\x1e\x7d\xc1\x98\xd4\x05\x82\x49\xa7\xe8\x7c\x4c\x59\x32\x60\xbc\xe0\xd6\xc1\xb8\x97\x5c\xde\x12\x50\x2c\xeb\x93\xca\xb7\x4e\xe0\x59\xb9\x73\xed\x4c\x47\x55\x15\x2f\xd5\x1e\xec\x5f\xad\x77\xb7\x5f\xde\xf9\xd7\xcd\x6a\xb7\xfe\xcd\xbf\xfd\xfe\x69\xdf\x7c\x24\xdd\x72\xae\xb7\xa0\xa7\x00\xa1\xd2\x75\x59\xef\x10\x2c\x9a\x50\x3a\x52\x2e\x19\x8b\x24\xc2\x00\x7c\x21\xfc\xae\x5c\xc3\xc1\x0f\x58\x7f\xd7\x26\xb3\xcb\x9f\xdc\xd7\xd7\xe0\x96\x0b\xb2\xa1\x8c\x83\x78\x68\x48\xfe\x49\x41\xcf\xdd\xc9\x8b\x20\x18\x25\x54\xbe\xbc\x28\xf2\xae\x01\x79\xa1\x29\x53\xce\xfa\x93\x8d\x37\xc3\x03\x54\x92\x7a\x1e\x16\x3c\xa4\x88\xb0\xbf\x08\xcb\x75\xa5\x08\xb3\x25\xbb\xd1\x5a\x22\xa8\x20\xd7\x61\xc4\x44\x5b\xfe\x0e\x9f\x68\xd0\x28\x85\xba\xd3\x42\x91\xdd\xe9\x6d\x89\x8a\x96\xec\xbd\xd4\x40\xed\x1c\x78\x4a\x33\xb9\x56\xe4\xd5\xc5\xbb\xfc\xba\x61\xfb\x9a\x5b\x04\x0f\x74\xbc\xc5\xec\x51\x7f\xb7\x8c\x8e\xe8\xdd\xc0\x40\x65\xfe\xa3\xf4\xe7\x79\xe7\x63\xb6\x98\x70\x68\x57\x5f\xe3\xd2\xc5\xae\x55\xa8\x0f\x5e\xdf\xf8\xe4\x6b\x86\x6f\xf3\xb7\x6c\x23\x24\xda\x95\xca\x36\xda\xe0\x22\x11\x0e\xaf\xed\x11\x64\x75\x51\x1d\xaf\x8c\x41\xc5\x6b\xc6\x41\xb1\x7b\x6c\xd4\x87\x7b\x68\xc3\x0a\x77\xd0\xe2\x72\x78\x93\xa9\xd3\x75\x65\xdb\x8a\x2a\x4b\xba\x40\xf3\xab\xd1\x55\x39\x98\x9d\x47\x50\x0a\xe5\x78\xea\x48\xcd\xa1\x3b\x68\x2f\x54\x5c\x26\xda\x92\xf3\x05\x3c\x2e\x5f\x0f\xb9\x25\x2c\xc2\x44\xca\x91\x3c\xe9\xaa\xb2\x90\x9f\xcf\x78\x93\x5a\x11\xbc\xe8\x84\x05\x0e\xd3\x2b\x12\xff\xf4\xf3\xb6\xc0\x5d\xc3\xea\x92\x83\x0d\x43\x74\xd8\x33\x86\x64\x83\x07\x74\xa1\x7b\x8e\x67\xce\xc3\x7e\x38\x7c\x3e\x60\xed\x06\xde\xa9\x25\x0d\xf7\x86\xc8\x5c\x6e\xb9\x01\x7d\x04\x7b\x22\x5d\x3d\x60\xdd\x75\x62\xa8\xf3\xd6\xd5\x49\x5c\xfa\x90\x91\xa8\xbd\xa9\x3f\x60\xed\x14\x74\xed\x7e\x33\x65\xe9\xb4\x6b\x92\xc3\xd2\x51\x22\x33\x3a\x32\x43\x2b\x25\x28\xb6\x35\xc9\x0a\x7b\x4e\x9e\x1a\x59\x61\xba\x24\x2d\x2a\x81\x8e\x7d\x8a\x82\x62\x84\x31\xbe\xe9\x4d\x9c\x31\x51\xbd\x9d\xee\x94\xa8\xff\x89\x16\x3e\xd1\xc1\x9b\x8d\xf0\x06\x2c\xf6\xda\xf3\x99\xbc\x2a\x9c\x60\x82\xf9\xa7\x12\x27\x7d\xe9\x29\x13\x36\xf3\xa2\x04\x91\xab\xcf\x95\xc4\x51\xc2\x67\xa8\x6a\xd7\x4a\x5b\x61\xdb\x97\xfd\xf9\xf9\x13\xa3\x29\x58\x78\x5a\x4b\xb0\xf6\x19\x85\xb9\x45\x30\xfc\xf8\x19\x6d\x25\xe9\x34\xed\x3d\x2b\x56\x7b\xc1\xdc\x03\x70\xec\xf3\x1b\x35\xfb\xf7\x8e\x31\xff\x16\x16\xba\x2a\xcf\xd1\x8e\x36\xda\x00\xdd\x9e\xb8\x41\xa9\xf5\xf4\x4d\xff\xd7\x23\x80\xcf\x7f\x1e\x47\xb0\xcd\xa6\x86\x99\x3f\xac\x33\xca\xdd\x8e\xf7\x44\xe8\x46\xa1\xbb\xea\x1f\x15\x9a\x76\x81\x19\xde\xe3\x2a\xf5\x8f\x76\x3d\xb1\x4a\x46\x5a\x45\xf4\x80\x60\xf8\x95\x0d\xee\xfd\xab\x42\x4b\xe3\x7b\x05\x46\xac\x01\x75\x03\xe3\xee\xf6\x6f\x00\x00\x00\xff\xff\x32\x4b\xbd\x4a\x83\x13\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
