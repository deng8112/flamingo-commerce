// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xdd\x6e\x1b\xb7\x12\xbe\x3e\x7a\x0a\x5a\xe7\x42\x36\x8e\xa2\x07\xd0\x9d\xa2\x38\xa7\x46\xec\xc4\x8d\xdc\xb4\x40\x10\x18\xe3\xdd\x91\x44\x84\x4b\x6e\xc9\x59\xc7\xdb\x20\x6f\xd5\x27\xe8\x93\x15\x43\x72\x57\xfb\x6b\x39\x48\x51\xb4\x40\x02\xc4\x80\x38\xbf\x9c\xf9\xe6\x87\x2b\x35\xa1\xdd\x42\x82\x62\x6d\xb2\x0c\x6d\x82\xb7\xd7\xd6\xa4\x45\x42\xe2\xf3\x44\x08\x21\xa8\xcc\x71\x29\x36\x64\xa5\xde\x9d\xf8\x93\x0c\xec\x47\xa4\x6b\x05\x09\xae\x4d\xda\x21\xca\x14\x35\xc9\xad\x44\xdb\x11\xc2\x54\xc2\xb2\x67\xe4\xf6\x8a\xcf\x4f\xe6\x9e\x27\xb7\x32\xc1\x01\x9e\x6b\x3e\xbf\xd0\x5b\x13\xf9\x48\x92\xea\x98\x4d\x80\x70\x67\xac\x44\x37\x20\xbf\xae\x89\x81\x39\x45\x97\x58\x99\x93\x34\xba\xad\xc5\xed\x8d\xa5\x17\x63\xd4\x0c\x69\xf8\x06\x04\x81\x41\x99\x12\x14\x95\x03\x3c\x97\x81\x12\xd8\x80\xc8\xca\xbb\x82\x06\x7d\x5d\xd5\xc4\x93\xc9\x97\xc9\x64\x3a\x9d\x4e\x56\xc2\xc9\x2c\x57\x28\xf2\xc0\x33\x17\xb4\x07\x12\x7b\x70\x42\x1b\x71\x0f\x56\xc2\x9d\xc2\x86\x5a\x01\x3a\x15\xb4\x47\x8b\x5b\x63\x91\x99\x2c\x2a\xe0\x0b\x09\x32\xc2\x30\xa5\xd2\xe5\xbc\x05\xce\x71\xdf\x95\x8d\xb7\x5a\xa1\xc1\xff\xc8\x50\x93\xfb\x8e\x94\x7f\x2e\x52\x12\xa3\xb7\x72\x57\x58\x8f\x88\x98\x63\x91\xe2\x56\x6a\x74\x0c\x09\x91\x1b\xe7\x24\x13\x3d\x6e\xd8\x75\x27\xcc\x56\x40\xc5\xbc\x10\x17\x24\x8c\x56\x25\xab\x22\x90\xda\x4d\xa4\xde\x1a\x9b\x05\xfc\xc0\x9d\x29\xa8\x56\xec\x75\x30\x22\xee\x8a\x1a\x8f\x90\x90\xbc\xc7\x8a\x24\x24\x39\x54\xdb\xc5\x23\x30\x5b\x37\x5c\xfe\x0e\xb6\x7f\x01\xd8\x98\xb9\x46\xcf\x06\x15\x26\x1e\x46\x4b\xf1\xbe\x27\xf6\xae\xc7\x76\xf2\xa1\x06\xab\xee\x61\xc5\x09\xa3\x91\xe1\x98\x81\xf6\x00\x4c\x2c\x12\x1e\x60\xe6\xfb\x1e\xf4\x40\x7e\x2f\x53\x74\x0b\xb1\x52\x4a\xa4\x40\x10\xba\x1d\xe3\xdd\x78\x7d\x6d\x2b\x13\x6e\x8e\xda\x90\xaf\x06\xfe\xdf\xd4\xe6\xd1\x0f\xca\x99\x1a\xfd\xa2\x8f\x7e\x49\x7f\xfc\xee\x04\x57\x91\xd4\x3b\x27\x4e\x43\x43\xad\x9d\xe4\x2e\xbb\x47\xe1\x20\x6b\xeb\x3e\x7b\xa4\x06\x56\xde\xc5\x77\x41\xc5\xb7\x14\xc1\xf4\x66\x8f\xdd\x4a\xe0\x80\xb2\x47\xb3\xa6\x37\xb3\x43\xc1\x6f\x10\xc3\x9d\x67\xf1\x0e\x57\x6d\xf9\x99\xd8\x1a\xeb\x35\x54\x89\xea\x18\x98\x7e\xaf\xbf\xbf\xbb\xfe\x1e\xcb\x33\x24\x54\x80\xaa\x92\x35\x3d\xd4\x6b\x2f\xb3\x1d\xec\xac\xc7\x31\x1f\x30\x0e\xf7\x20\x55\x6b\xb4\x1c\xa6\xc8\xf4\x9b\xfb\x42\xe5\xc3\x3d\x6a\x89\x3a\xf1\x46\x72\xb4\x54\x72\x21\x43\x92\xa0\x73\xd5\xfd\x9a\x5d\x43\xc1\x1d\x2a\x27\x10\x9c\x54\x65\xf0\x02\x0e\xe5\x74\xdc\x97\xd5\x08\x73\xec\x54\x2b\xb1\xb3\xa6\xc8\xfd\x90\xac\x93\xb0\x10\xe7\x8b\xdd\x42\xcc\x9c\xfc\x0d\x67\x63\x45\xdd\x57\x19\xcb\x36\xe9\x85\xde\xdf\xa1\x93\x0d\x6e\x67\x71\x5a\xcb\xd6\xb8\x0e\xd5\xc8\x9d\xb0\xf2\xa7\x72\xe7\x6a\x36\x17\xb3\x4b\xfe\xf3\xcb\xe5\x2c\x84\xc2\xe4\x5f\x91\x84\xdb\x37\x9e\x3b\x5c\xfc\x1c\x5c\xf9\x8c\xcc\xb3\x18\xf9\x66\x32\x52\xe9\x72\x05\xe5\xc1\x81\x01\xc4\x40\xb7\xbd\x3f\xa1\xf7\x0d\x05\xab\xb6\x71\xd9\x8f\x51\xb8\x5c\x87\xe0\x93\xa6\x23\xcd\x07\x0b\x86\x52\xf8\xf4\xac\xc5\xa8\x44\x7f\x06\x52\xe5\x08\x68\xa8\x41\x8d\xaa\xda\xb0\x40\x4c\xf3\x34\xe4\xa9\xae\x3d\x1a\x2e\x6c\xd0\x75\xcd\xf9\xdc\x67\x40\xc9\xde\xef\x74\x3c\x35\xbd\xd6\x85\x57\xf4\x02\x73\xd4\xa9\xd4\x3b\x1e\x44\x72\x1b\xde\x01\x3c\x5a\x7b\x09\x11\xc6\xf2\x20\x9c\x0b\x49\x82\xb8\x0d\x72\x6a\xa5\x4e\x54\x91\xe2\x90\x1b\x5e\x7d\x67\x14\xc4\xb7\xc8\x1d\xba\xa6\x4b\x28\x92\xc2\x5a\x64\x13\x0d\xcf\xaa\xab\x1e\xe9\x45\x73\x9f\x41\xee\x6f\x3e\xae\xf1\xf2\x31\x9d\x61\xb4\xa7\xec\x69\xc3\x8c\x2a\x7b\x58\x43\x5d\x64\x5f\x9b\x91\x98\x61\x6f\x7b\x4c\xb3\x5f\x73\x7d\xd0\xf1\x01\x92\x46\x0d\x8a\xff\x09\x50\xaa\x6a\x94\x6d\x99\x26\xea\xd8\xc2\x6a\x7d\x73\xf1\xee\x3c\x96\x79\xcd\x15\x17\x09\xda\x83\x1e\xe8\x73\x67\x02\x1f\xa4\x23\x37\x1f\xc8\xff\x37\xb8\x72\xb5\xba\x59\xff\x10\x3c\x79\x6d\x6a\xae\xbf\xd8\xd4\x22\xd8\x7a\xfd\xe6\x36\x98\xe3\x04\xff\x6c\x21\xcf\x31\x76\xb2\x88\x3a\x27\x32\x90\xba\x9a\xda\xa5\x7f\xc7\xb2\xfa\xc3\x18\x1f\x7d\x44\xd4\x1c\x31\x89\xac\x68\x7c\xe6\x97\x37\x08\x0e\x6d\x1c\xbc\x4a\x2d\x85\x18\x68\x90\x1d\xe6\xd0\x16\x79\xae\x0f\xb4\x3b\xff\xb6\x0a\x72\x63\x3e\x7a\xc9\xe0\xdd\x47\x2c\x3f\x19\x9b\xba\xe5\x7f\xf8\xd7\xfb\x88\xfc\x60\x20\x2e\x05\x83\x36\xa4\x3b\x66\xa4\x92\xfe\xdc\x5c\x9d\x44\xe8\x30\xc3\xac\x87\x3d\xca\x8b\x20\x58\x2d\xf5\x6e\xf9\xa8\xc8\x79\x60\xf2\x42\x5f\x26\x8f\xbb\x72\xd0\x3f\xba\xb5\xa6\xb8\x85\x42\x51\x2b\x5f\x32\x89\x1d\x52\xba\x17\xd2\x25\xa6\xd0\x84\xe9\x52\x3c\x37\x46\x21\xe8\x28\xd7\x20\x0c\x89\x56\xf4\x1b\x7c\xa0\xce\xd2\x26\xf5\xb5\x91\x9a\xdc\x8d\xd9\xe4\xa8\x69\x29\x5e\x2a\x03\x54\xbd\x24\x1f\xc6\x89\xfc\x30\xf0\xea\x86\xf7\xd1\x75\x20\x87\x31\xb4\xd9\x9b\x4f\xa1\x1f\xfa\x08\xc5\xcf\x32\x22\xf7\xca\x7d\xa4\x31\x3d\x92\xc8\x66\xa8\x9b\xfd\xc9\x0b\xc5\x85\x2f\xb2\x36\x38\xe7\x02\x79\x21\xb8\x92\x0a\xdd\x4a\xa7\x57\xc6\xc6\x25\x7d\xe4\xc5\x70\x0f\xaa\x78\x54\x5d\x68\x87\x49\x29\x12\xd0\xe2\x0e\x83\xfa\x78\x0f\x63\x45\xc6\x86\xa6\x8f\xe7\x72\x14\x27\xcd\xb8\x55\x1b\x52\xe1\xc8\x64\x68\xff\xcf\x73\xbb\xb3\xd2\xef\x41\x6b\x54\xfd\xf5\x55\x99\x04\x9a\xfb\xff\xa8\x3d\xff\xb6\xa8\xb6\x0b\xae\xfd\x7e\xe5\x7b\x96\x0b\xc2\x2c\xae\xa5\x3b\x24\x7f\x74\x5a\x38\xd8\x1d\x6c\x9c\x8d\xbd\x5c\xbc\xe8\x11\x0f\x98\xa7\x55\x11\xfe\x5f\x1b\xa4\x19\xde\x04\x52\xf3\x38\xfa\xd0\xe5\x8e\xcf\x9f\xee\xb1\xc5\x2d\x72\xea\x9e\x12\x99\xc3\x2b\xa3\xbb\x7c\xbd\xc2\x92\x77\xc8\xba\x51\x75\x1f\x2c\x03\x6b\x75\x45\x8d\xdc\x7b\x70\xf5\xd1\xe9\x47\x2c\x9b\x41\x8c\x45\x5d\x85\x7a\x94\x6f\xdc\x48\x4f\xd4\x3d\x2f\x5f\x61\xc9\x0a\x9a\x7e\x9f\x1d\xf3\xf4\x78\x68\x46\x77\x78\x3e\x19\xd8\x51\x07\xf6\xc5\x42\x4b\xea\xe3\xd7\xd7\x60\x2b\xc8\xa3\xce\xb4\x07\xd3\xa8\x47\x39\xd0\xbe\x7d\xa2\x21\xeb\xf1\x58\xdf\xe1\x8e\xd8\x38\x52\xbd\x8d\xee\x34\x52\xff\x47\xfa\xf5\x91\x76\x1d\x36\x8b\xe7\xe0\xb0\xd5\x8b\x0f\xc7\xab\x8c\x05\x47\x88\x3f\x69\x59\xeb\x1b\x1f\x29\xf1\x83\x41\x96\x83\xdc\xe9\xb7\x85\xc2\x1e\xe0\x53\xd4\x25\xb7\xd2\x4a\xd8\xb5\x65\xff\xfb\xf4\xf1\x10\x0a\x16\x1e\xd6\x0a\x9c\x7b\x42\x61\x6e\x10\x6c\xb2\x7f\x8b\xae\x50\x54\x8f\xf6\xf0\x01\x7f\x00\xd1\xd1\xdd\x2d\x24\xd8\xa6\x07\x35\xb7\x2f\x99\x70\xf2\x21\x3e\x5e\x8a\xdd\x0e\x5d\xef\x91\x18\x59\x37\x35\x35\x2a\x75\xfe\xfc\xaa\xfd\xcd\x23\x32\x1f\x3e\x79\xec\xc1\x85\x0d\x1b\x53\x6f\xac\x31\xb7\xbf\x4c\x26\xf8\x40\xc8\xa3\x90\xaf\xfa\x63\x81\xb6\xda\x56\xba\xf7\x38\x1d\xfb\xa4\x34\x3f\xf2\x86\x18\x68\x15\x83\x06\xa2\xe3\xa7\x2e\x86\xf7\xd7\x02\x1d\xf5\xef\x15\x09\x43\x0d\xa8\x99\x18\xbe\xdb\x9f\x01\x00\x00\xff\xff\x9a\x8b\xc0\xef\x4f\x1b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
