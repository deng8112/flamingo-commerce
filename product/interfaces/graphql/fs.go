// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x8e\xdb\x36\x10\x3e\xd7\x4f\x41\xbb\x97\x0d\xb0\xc8\x03\xf8\xe6\x75\x93\x76\x91\xb8\xd9\xc6\x6e\x2e\x41\x60\xcc\x52\x63\x99\x58\x8a\x54\xc9\xd1\x66\x85\xa2\xef\x5e\x90\xa2\x6c\xfd\x90\xd6\x2e\x0a\x34\x97\xd5\x49\x9a\xf9\x66\x38\x3f\x9c\x1f\x09\x45\x68\x0e\xc0\x91\xad\x75\x51\xa0\xe1\xb8\xbf\x33\x3a\xab\x38\xb1\xbf\x67\x8c\x31\x46\x75\x89\x4b\xb6\x25\x23\x54\x3e\xf7\x94\x02\xcc\x03\xd2\x9d\x04\x8e\x6b\x9d\x0d\x99\x98\x09\x58\x8e\x94\xed\x37\x8e\x3e\xbf\xf6\x98\xd2\x08\x8e\x11\xcc\x9d\xa3\xdf\xaa\x83\x0e\x38\x12\x24\x07\xea\x39\x10\xe6\xda\x08\xb4\x11\xf9\xf5\x89\xd9\x80\x33\xb4\xdc\x88\x92\x84\x56\x43\x23\x29\x6e\x23\x41\x03\x90\xba\x06\x49\x75\x04\xf3\xb1\xe1\x34\x30\x20\x32\xe2\xbe\xa2\xa8\x35\xab\x13\x73\x3e\xfb\x67\x36\x9b\xb9\x40\x8e\x51\x5b\x51\x94\x12\xdb\x90\xfb\x8f\x02\x15\xd9\xd7\x74\xfc\x90\x74\xac\xb5\x3a\x88\xbc\x32\x70\xff\x9a\x94\xff\x39\x29\x0e\xfc\x08\x46\x80\xb3\x65\x8b\x12\xb9\x7b\xb1\x4b\xf6\x75\x24\xf6\x65\x04\x9b\x7f\xbb\x90\xd4\x15\x27\xf1\x88\x5e\x48\xd1\x6b\x56\x7f\x4c\x56\x15\x6d\x2e\x45\xef\xbf\x64\xde\x1b\x74\xce\xf1\xb4\x96\x55\x02\xdc\xdc\xa2\xf8\x25\x1a\xa3\xc3\x35\xe1\x23\x5f\x24\xdc\xa3\xec\x93\x74\xf9\x02\x97\xf6\x9f\x3c\xfa\x82\x31\x29\x07\x82\x49\xa7\xec\x7c\x4c\x59\x32\x60\xbc\xc0\xeb\x60\x5c\x38\x29\xe2\xaa\x25\xa0\xd8\x1d\x4f\xaa\xda\x3a\x81\x67\xdd\x94\x6b\x67\x28\xaa\xaa\x78\xa9\xf6\x60\xed\x6a\xbd\xbb\xfd\xf2\xce\xbf\x6e\x56\xbb\xf5\x6f\xfe\xed\xf7\x4f\xfb\xe6\x23\x19\x84\x73\x75\x05\x3d\x05\x08\x95\xae\xc2\x7a\x87\x60\xd1\x84\x42\x91\x72\xc9\x58\x24\xed\x03\xf0\x85\x64\xbb\xe2\x0c\x07\x3f\x60\xfd\x5d\x9b\xcc\x2e\x7f\x72\x5f\x5f\x43\x58\x2e\xc8\x86\xa2\x0d\xe2\xa1\xfd\xf8\x27\x05\x3d\xf7\x22\x2f\x82\x60\x94\x50\xf9\xf2\xa2\xc8\xbb\x06\xe4\x85\xa6\x4c\x39\xeb\x4f\xb6\xd9\x0c\x0f\x50\x49\xea\x45\x58\xf0\x70\x45\x84\xfd\x45\x58\xae\x2b\x45\x98\x2d\xd9\x8d\xd6\x12\x41\x05\xb9\x0e\x23\x26\xda\xf2\x77\xf8\x44\x83\xb6\x28\xd4\x9d\x16\x8a\xec\x4e\x6f\x4b\x54\xb4\x64\xef\xa5\x06\x6a\xbb\xfe\x53\x9a\xc9\xb5\x22\xaf\x2e\xde\xd3\xd7\x0d\xdb\x57\xd8\x22\x44\xa0\x13\x2d\x66\x8f\xfa\xbb\x65\x74\x44\x1f\x06\x06\x2a\xf3\x1f\xa5\x3f\xcf\x07\x1f\xb3\xc5\x44\x40\xbb\xfa\x9a\x90\x2e\x76\xad\x42\x7d\xf0\xfa\xc6\x27\x5f\x33\x7c\x9b\xbf\x65\x1b\x21\xd1\xae\x54\xb6\xd1\x06\x17\x89\x74\x78\x6d\x8f\x20\xab\x8b\xea\x78\x65\x0c\x2a\x5e\x33\x0e\x8a\xdd\x63\xa3\x3e\xf8\xa1\x0d\x2b\xdc\x41\x8b\xcb\xe9\x4d\x5e\x9d\x6e\x28\xdb\xae\x5b\x59\xd2\x05\x9a\x5f\x8d\xae\xca\xc1\xa4\x3c\x82\x52\x28\xc7\x33\x46\x6a\x0e\xdd\xb1\x7a\xa1\xe2\x32\xd1\x96\x9c\x2f\xe0\x71\xf9\x7a\xc8\x2d\x61\x11\xe6\x4f\x8e\xe4\x49\x57\x95\x85\xfc\x7c\xc6\x9b\xd4\x42\xe0\x45\x27\x2c\x70\x98\x5e\x91\xf8\xa7\x7f\x6f\x0b\xdc\x35\xac\x2e\x39\xd8\x30\x44\x87\xad\x62\x48\x36\x78\x40\x97\xba\xe7\x44\xe6\x3c\xda\x87\xa3\xe6\x03\xd6\x6e\xbc\x9d\x5a\xd2\x70\x4b\x88\x4c\xe1\x96\x1b\xd0\x47\xb0\x27\xd2\xd5\x03\xd6\xdd\x20\x86\x3a\x6f\x43\x9d\xc4\xa5\x0f\x19\x89\xda\x9b\xfa\x03\xd6\x4e\x41\xd7\xee\x37\x53\x96\x4e\x87\x26\xb9\x17\x38\x4a\x64\x22\x47\x66\x68\xa5\x04\xc5\x76\x24\x59\x61\x2f\xc8\x53\x23\x2b\x4c\x97\xa4\x45\x25\xd0\xb1\x4f\x51\x50\x8c\x30\xc6\x37\xbd\x89\x33\x26\xaa\xb7\xd3\x9d\x12\xf5\x3f\xd1\xc2\x27\x3a\x78\xb3\xff\xdd\x80\xc5\x5e\x7b\x3e\x93\x57\x85\x13\x4c\x30\xff\x54\xe2\xa4\x2f\x3d\x65\xc2\x1e\x5e\x94\x20\x72\xf5\xb9\x92\x38\xba\xf0\x19\xaa\xda\xb5\xd2\x56\xd8\xf6\x65\x7f\x7e\xfe\xc4\x68\x0a\x16\x9e\xd6\x12\xac\x7d\x46\x61\x6e\x11\x0c\x3f\x7e\x46\x5b\x49\x3a\x4d\x7b\xcf\x8a\xd5\x5e\x30\xf7\x00\x1c\xfb\xfc\x46\xcd\xfe\xbd\x63\xcc\xbf\x85\x85\xae\xca\x73\xb4\xa3\xfd\x35\x40\xb7\x27\x6e\x50\x6a\x3d\x7d\xd3\xff\xd1\x08\xe0\xf3\x7f\xc6\x11\x6c\xb3\xa9\x61\xe6\x0f\xeb\x8c\x72\xb7\xe3\x3d\x11\xba\x51\xe8\x5c\xfd\xa3\x42\xd3\x2e\x30\x43\x3f\xae\x52\x7f\x64\xd7\x13\xab\x64\xa4\x55\x44\x0f\x08\x86\x5f\xd9\x10\xde\xbf\x2a\xb4\x34\xf6\x2b\x30\x62\x0d\xa8\x9b\x18\xe7\xdb\xbf\x01\x00\x00\xff\xff\xf9\xcb\xd9\x94\x71\x13\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
