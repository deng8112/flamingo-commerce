// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x6e\xdb\x38\x10\x3e\xd7\x4f\x41\x7b\x2f\x29\x50\xf4\x01\x7c\x4b\xbc\xdb\xc5\xa2\x35\x90\xad\xbd\xa7\x22\x08\x26\xd4\x58\x26\x42\x91\x5a\x72\xd8\x46\x58\xf4\xdd\x17\xfc\x91\x2c\x8a\x52\x7c\xea\x2d\xb9\x79\xbe\xf9\xe3\xc7\x99\x4f\x8c\x50\x84\xe6\x04\x1c\xd9\x4e\x37\x0d\x1a\x8e\x8f\xf7\x46\x57\x8e\x13\xfb\x6f\xc5\x18\x63\x0d\x98\x67\xa4\x7b\x09\x1c\x77\xba\xc2\x2d\x3b\x90\x11\xaa\x5e\x47\x10\x2b\x01\x5b\xf6\x6d\x1a\xbb\xf7\xf6\xf5\xc3\x87\xe0\xd4\x1a\xc1\x71\x5b\xe4\xbf\xf7\xe6\xbf\xd4\x49\xaf\xa3\x1b\x09\x92\x93\xf4\x1c\x08\x6b\x6d\x04\xda\x32\x7c\x37\x60\xd1\xb7\x42\xcb\x8d\x68\x49\x68\x35\xed\x91\xa0\x0c\xdf\x23\x41\xc4\xa5\xee\x40\x52\x57\xba\x7c\x89\x40\xf4\x02\x22\x23\x9e\x1c\xcd\xb5\x72\x3b\x60\xeb\xd5\xcf\xd5\x6a\x45\x5d\x3b\xa2\xf3\x20\x9a\x56\x62\x4f\x6a\xf8\xd1\xa0\x22\xfb\x46\xf8\x2f\x22\x7c\xa7\xd5\x49\xd4\xce\xc0\xd3\x1b\xed\xbf\x92\xf6\x9c\xf5\xa2\xdd\xc4\xeb\xf8\x6c\x6c\xc4\x60\x72\xec\x8e\x08\x16\xcd\xfa\x21\x5d\x82\x50\x3d\x30\xaa\x3f\xf1\x5d\x2c\xee\x0f\x9b\xca\x66\x34\x31\x96\x31\x15\x6f\xe0\xdd\xbb\xa9\xfd\x19\xbb\x1f\xda\x54\x76\x1b\x90\x6f\x09\x7a\x58\x2c\x97\x88\x4b\x15\xd3\xf5\x87\xbf\x05\xcf\xcb\x28\x84\x08\x04\xa3\x84\xaa\xb7\xaf\x44\xfc\x11\x5d\x62\xcc\x95\x3e\x86\xec\xa9\x21\xef\x9b\x8f\x48\x85\x27\x70\x92\xb2\x9b\x15\x1c\x23\x28\xec\xef\xc2\x72\xed\x14\x61\xb5\x65\x77\x5a\x4b\x04\x95\xe2\x46\xc0\x5c\x68\x8f\x1f\xf1\x85\x26\x43\x29\xd4\xbd\x16\x8a\xec\x51\x1f\x5a\x54\xb4\x65\x9f\xa4\x06\x4a\x20\xbc\x2c\x83\x5c\x2b\x0a\xe9\xf2\x82\xbb\x68\x0e\x64\x6c\x4a\x92\x98\x3d\xeb\x1f\x96\xd1\x19\xc3\xf1\x19\xa8\x2a\xfc\x68\x43\x9d\xc0\x38\x56\x9b\x57\x69\x1c\x67\x8b\x44\x6e\x8e\x7d\x3a\x7d\x0a\xd9\x4a\xcf\x0f\x0c\x3f\xd6\x1f\xd9\x5e\x48\xb4\xb7\xaa\xda\x6b\x83\x9b\x85\x4b\x08\xd9\xbe\x83\x74\xaf\xa6\xe3\xce\x18\x54\xbc\x63\x1c\x14\x7b\xc2\x98\x3e\x9d\x42\x1b\xd6\xf8\x42\x9b\xd7\x2f\x75\x66\x5c\x2e\x04\xf6\xdb\xe9\x2c\xe9\x06\xcd\x9f\x46\xbb\x76\x22\x4a\x67\x50\x0a\x65\x29\x86\x52\x73\x18\x2b\x58\xa9\xc0\x63\x75\xcc\x86\x91\x4d\x57\xae\x11\x0d\x1e\x23\x34\x36\x3b\x0b\x75\x72\x2f\x17\xb7\x30\x1b\x3c\xa1\x27\x2b\xef\x69\xb6\xa5\x8b\x84\xa5\xbe\x06\xbd\xfb\x8c\x9d\xdd\x8e\x96\x7e\x2a\x86\x85\xf6\x0f\xa9\x92\xf3\x19\xec\x60\xba\x79\xc6\x6e\x68\xe6\xfd\xb0\x4d\xc1\xaf\x46\x5a\xf4\x5b\xac\x51\x44\xda\xbb\xee\x33\x76\x3e\x7e\xdc\xf5\xfb\x2b\x7d\x5e\xa5\xa5\x1f\x8b\xe2\xd2\xbd\xe5\x0b\x3c\xa1\x9c\xcc\x42\x69\x72\x4a\x50\x39\x34\x61\xe0\x33\x82\x8b\x5e\x72\x95\x5f\xec\xa4\x05\x3a\xe7\x16\x05\x4d\xe1\x63\x82\x9e\x2c\xe4\x5e\xe4\x61\x2a\xa1\x0b\xbb\x75\x45\x14\xaf\x68\x22\x70\x12\xdf\xf1\x0e\x2c\x66\x82\x77\x31\xdf\x36\x3e\x70\x01\xfc\x47\x89\x21\xdf\xb2\x6e\xa7\x4f\x6f\xd3\x82\xa8\xd5\x57\x27\xb1\x98\xed\x0a\x55\xe7\x65\xaa\x0f\xb6\x79\xec\x6f\xd7\x35\x38\xae\x24\xbc\xec\x24\x58\x7b\x7d\xf5\x1e\x0f\x08\x86\x9f\xbf\xa2\x75\x92\x86\x6f\x66\x80\xe6\xd6\x2b\xb5\xe9\xff\x35\xc9\xf1\x98\xe6\xf1\x93\x07\xd6\x0f\x91\x1e\xeb\xea\x1a\xad\xff\xd8\xcf\xb9\x1e\x06\x34\x25\xb5\xc1\xbe\xcf\x1f\x4c\xc9\xf9\xf2\x60\x3a\x83\x3d\xa0\x44\x4e\x58\x85\x62\xa3\x8f\xe2\xcf\xd5\x0a\x5f\x08\xfd\xc7\xc5\x1f\xf5\x6f\x87\xa6\x7f\x06\x4c\xcf\x71\x13\x1f\x96\x6d\xf1\xb0\x9c\x59\xf7\xd9\x04\xa9\xb1\x1b\x9b\xe8\xfb\xd7\xa1\xa5\xb2\xef\x04\xcc\x64\xcd\x88\xf7\xbd\xff\x1f\x00\x00\xff\xff\x49\x63\xd8\x6d\xf4\x0d\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
