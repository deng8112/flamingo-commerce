// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\xeb\x6e\xdb\xc6\x12\xfe\xaf\xa7\x18\xeb\xfc\x90\x8d\xa3\xe8\x01\xfc\x4f\x51\x9c\x73\x8c\xd8\x89\x1b\xb9\x69\x81\x20\x30\xc6\xe4\x48\x5a\x64\xb9\xcb\xee\x0e\x1d\xb3\x41\xde\xaa\x4f\xd0\x27\x2b\xf6\x42\x8a\x57\xc9\x69\x8a\xa2\x05\x22\x20\x01\xbc\x73\xdd\x99\x6f\x2e\x4b\xa1\x98\xcc\x06\x13\x82\x95\xce\x32\x32\x09\xdd\xdd\x18\x9d\x16\x09\xc3\xe7\x09\x00\x00\x97\x39\x9d\xc3\x9a\x8d\x50\xdb\x13\x7f\x92\xa1\xf9\x48\x7c\x23\x31\xa1\x95\x4e\x3b\x44\x91\x92\x62\xb1\x11\x64\x3a\x42\x94\x0a\x3c\xef\x19\xb9\xbb\x76\xe7\x27\x73\xcf\x93\x1b\x91\xd0\x00\xcf\x8d\x3b\xbf\x54\x1b\x1d\xf9\x58\xb0\xec\x98\x4d\x90\x69\xab\x8d\x20\x3b\x20\xbf\xaa\x89\x81\x39\x25\x9b\x18\x91\xb3\xd0\xaa\xad\xc5\xee\xb4\xe1\x17\x63\xd4\x8c\x78\xf8\x06\x8c\x81\x41\xea\x12\x25\x97\x03\x3c\x57\x81\x12\xd8\x90\xd9\x88\xfb\x82\x07\x7d\x5d\xd6\xc4\x93\xc9\x97\xc9\x64\x3a\x9d\x4e\x96\x60\x45\x96\x4b\x82\x3c\xf0\xcc\x81\x77\xc8\xb0\x43\x0b\x4a\xc3\x03\x1a\x81\xf7\x92\x1a\x6a\x01\x55\x0a\xbc\x23\x43\x1b\x6d\xc8\x31\x19\x92\xe8\x2e\x04\xac\x41\x3b\x4a\xa5\xcb\x7a\x0b\x2e\xc7\x7d\x57\xd6\xde\x6a\x85\x06\xff\x47\x46\x8a\xed\x77\xa4\xfc\x73\x91\x92\x68\xb5\x11\xdb\xc2\x78\x44\xc4\x1c\x43\x4a\x1b\xa1\xc8\x3a\x48\x40\xae\xad\x15\x8e\xe8\x71\xe3\x5c\xb7\xa0\x37\x80\x15\xf3\x02\x2e\x19\xb4\x92\xa5\x53\xc5\x28\x94\x9d\x08\xb5\xd1\x26\x0b\xf8\xc1\x7b\x5d\x70\xad\xd8\xeb\x70\x88\xb8\x2f\x6a\x3c\x62\xc2\xe2\x81\x2a\x12\x08\xb6\x24\x37\x8b\x03\x30\x5b\x35\x5c\xfe\x0e\xb6\x7f\x01\xd8\x1c\x73\x8d\x9e\x35\x49\x4a\x3c\x8c\xce\xe1\x7d\x4f\xec\x5d\x8f\xed\xe4\x43\x0d\x56\xd5\xc3\x8a\x05\xad\xc8\xc1\x31\x43\xe5\x01\x98\x18\x62\xda\xc3\xcc\xf7\x3d\xec\x81\xfc\x41\xa4\x64\x17\xb0\x94\x12\x52\x64\x0c\xdd\xce\xe1\x5d\x7b\x7d\x6d\x2b\x13\xd7\x1c\x95\x66\x5f\x0d\xee\x5f\x53\x9b\x47\x3f\x4a\xab\x6b\xf4\x43\x1f\xfd\x82\x7f\xff\xcd\x82\xab\x22\xa1\xb6\x16\x4e\x43\x43\xad\x9d\x74\x5d\x76\x47\x60\x31\x6b\xeb\x3e\x3b\x50\x03\x4b\xef\xe2\xbb\xa0\xe2\x5b\x8a\x60\x7a\xbb\xa3\x6e\x25\xb8\x80\x3a\x8f\x66\x4d\x6f\x66\xfb\x82\x5f\x13\x85\x3b\xcf\xe2\x1d\xae\xdb\xf2\x33\xd8\x68\xe3\x35\x54\x89\xea\x18\x98\x7e\xaf\xbf\xbf\xbb\xfe\x0e\xe5\x19\x13\x2e\x50\x56\xc9\x9a\xee\xeb\xb5\x97\xd9\x0e\x76\x56\xe3\x98\x0f\x18\xc7\x07\x14\xb2\x35\x5a\xf6\x53\x64\xfa\xcd\x7d\xa1\xf2\xe1\x81\x94\x20\x95\x78\x23\x39\x19\x2e\x5d\x21\x63\x92\x90\xb5\xd5\xfd\x9a\x5d\x43\xe2\x3d\x49\x0b\x84\x56\xc8\x32\x78\x81\xfb\x72\x3a\xee\xcb\x72\x84\x39\x76\xaa\x25\x6c\x8d\x2e\x72\x3f\x24\xeb\x24\x2c\xe0\x62\xb1\x5d\xc0\xcc\x8a\x5f\x69\x36\x56\xd4\x7d\x95\xb1\x6c\x93\x5e\xe8\xfd\x1d\x3a\xd9\x70\xed\x2c\x4e\x6b\xd1\x1a\xd7\xa1\x1a\x5d\x27\xac\xfc\xa9\xdc\xb9\x9e\xcd\x61\x76\xe5\xfe\xfb\xf9\x6a\x16\x42\xa1\xf3\xaf\x48\xc2\xdd\x1b\xcf\x1d\x2e\x7e\x81\xb6\x7c\xc6\xfa\x59\x8c\x7c\x33\x19\xa9\xb0\xb9\xc4\x72\xef\xc0\x00\x62\xb0\xdb\xde\x9f\xd0\xfb\xfe\x74\xb0\x1e\x50\x16\x0d\x2e\x9f\x37\x15\xef\xee\xe3\x85\x43\x59\x7c\x7a\xe2\x62\x60\xa2\x4b\x03\x0e\x58\x46\x1e\xea\x51\xa3\xaa\xd6\x4e\x20\x66\x7a\x1a\x52\x55\x97\x1f\x0f\xd7\x36\xaa\xba\xec\x7c\xfa\x33\xe4\x64\xe7\xd7\x3a\x37\x38\xbd\xd6\x85\x57\xf4\x82\x72\x52\xa9\x50\x5b\x37\x8b\xc4\x26\x3c\x05\xdc\x74\xed\xe5\x04\xb4\x71\xb3\x70\x0e\x82\x81\x5d\x27\x74\xd9\x15\x2a\x91\x45\x4a\x43\x6e\x78\xf5\x9d\x69\x10\x9f\x23\xf7\x64\x9b\x2e\x11\x24\x85\x31\xe4\x4c\x34\x3c\xab\xae\x7a\xa4\x1d\xcd\x7d\x06\x5d\x8b\xf3\x71\x8d\x97\x8f\xe9\x0c\xd3\x3d\x75\x9e\x36\xcc\xc8\xb2\x07\x37\x52\x45\xf6\xb5\x19\x89\x19\xf6\xb6\xc7\x34\xfb\x4d\xd7\x07\x9d\x1e\x31\x69\x94\x21\xfc\x17\x50\xca\xaa\x57\xb6\x65\x9a\xa8\x73\x16\x96\xab\xdb\xcb\x77\x17\xb1\xd2\x6b\xae\xb8\x4b\xf0\x0e\xd5\x40\xab\x3b\x03\x7a\x14\x96\xed\x7c\x20\xff\xdf\xe0\xca\xf5\xf2\x76\xf5\xff\xe0\xc9\x6b\x5d\x73\xfd\xc5\xa6\x16\xc1\xd6\xeb\x37\x77\xc1\x9c\x4b\xf0\x4f\x06\xf3\x9c\x62\x33\x8b\xa8\xb3\x90\xa1\x50\xd5\xe0\x2e\xfd\x53\xd6\xa9\xdf\x4f\xf2\xd1\x77\x44\xcd\x11\x93\xe8\x14\x8d\x8f\xfd\xf2\x96\xd0\x92\x89\xb3\x57\xca\x73\x80\x81\x1e\xd9\x61\x0e\x9d\xd1\x8d\xf6\x81\x8e\xe7\x9f\x57\x41\x6e\xcc\x47\x2f\x19\xbc\xfb\x48\xe5\x27\x6d\x52\xeb\xec\xfa\xdf\xfb\x08\xfe\x60\x23\xae\x06\x83\x66\x84\x3d\x66\xa7\x92\xfe\xdc\x5c\xa0\x20\x34\x99\x61\xd6\xfd\x36\xe5\x45\x08\x8d\x12\x6a\x7b\x7e\x50\xe4\x22\x30\x79\xa1\x2f\x93\xc3\xae\xec\xf5\x8f\xee\xae\x29\x6d\xb0\x90\xdc\x4a\x99\x48\x62\x93\x14\xf6\x85\xb0\x89\x2e\x14\x53\x7a\x0e\xcf\xb5\x96\x84\x2a\xca\x35\x08\x43\xa2\x15\xfd\x96\x1e\xb9\xb3\xba\x09\x75\xa3\x85\x62\x7b\xab\xd7\x39\x29\x3e\x87\x97\x52\x23\x57\xef\xc9\xc7\x71\xa2\x7b\x1e\x78\x75\xc3\x5b\xe9\x2a\x90\xc3\x24\x5a\xef\xf4\xa7\xd0\x12\x7d\x84\xe2\xc7\x19\xc8\xbd\x72\x1f\x69\x4a\x8f\x24\xb2\x19\xea\x66\x8b\xf2\x42\x71\xed\x8b\xac\x0d\xce\x39\x90\x5b\x0b\xae\x85\x24\xbb\x54\xe9\xb5\x36\x71\x55\x1f\x79\x37\xf8\x29\x7a\x48\x5d\xe8\x88\x49\x09\x09\x2a\xb8\xa7\xa0\x3e\xde\x43\x1b\xc8\x9c\xa1\xe9\xe1\x5c\x8e\xe2\xa4\x19\xb7\x6a\xf4\x17\x96\x75\x46\xe6\x7f\x6e\x74\x77\x16\xfb\x1d\x2a\x45\xb2\xbf\xc4\x4a\x9d\xa0\x6c\xaf\x02\x63\xa5\x98\x8a\xaa\x16\x7d\xf9\xf7\x8b\xdf\xb3\x5c\x32\x65\x71\x39\xdd\x12\xfb\xa3\xd3\xc2\xe2\x76\x6f\xe3\x6c\xec\xfd\xe2\x45\x8f\x78\xe0\x78\x5a\x15\xe1\x7f\x6d\x90\x66\x74\x1b\x48\xcd\xe3\xe8\x43\x97\x3b\x3e\x82\xba\xc7\x86\x36\xe4\x52\xf7\x94\xc8\xec\xdf\x1a\x55\x78\xaa\x83\x57\x54\xba\x4d\xb2\x6e\x54\xdd\x67\xcb\xc0\x72\x5d\x51\x23\xf7\x0e\x6d\x7d\x74\xfa\x91\xca\x66\x10\x63\x51\x57\xa1\x1e\xe5\x1b\x37\xd2\x13\xb5\xcf\xcb\x57\x54\x3a\x05\x4d\xbf\xcf\x8e\x79\x7a\x3c\x34\xa3\xcb\xa9\x3b\xb9\xea\xef\x87\x03\x2b\x63\xa1\x04\xf7\xf1\xeb\x6b\xb0\x15\xe4\x51\x67\xda\xb3\x69\xd4\xa3\x1c\x79\xd7\x3e\x51\x98\xf5\x78\x8c\xef\x70\x47\x6c\x1c\xa9\xde\x46\x77\x1a\xa9\xff\x23\xfd\xfa\x48\xbb\x0e\xcb\xc5\x73\xb4\xd4\xea\xc5\xfb\xe3\x65\xe6\x04\x47\x88\x3f\x2a\x51\xeb\x1b\x1f\x29\xf1\xb3\x41\x96\xa3\xd8\xaa\xb7\x85\xa4\x1e\xe0\x53\x52\xa5\x6b\xa5\x95\xb0\x6d\xcb\xfe\xe7\xe9\xe3\x21\x14\x2c\x3e\xae\x24\x5a\xfb\x84\xc2\x5c\x13\x9a\x64\xf7\x96\x6c\x21\xb9\x1e\xed\xe1\x33\xfe\x00\xa2\xa3\xbb\x1b\x4c\xa8\x4d\x0f\x6a\xee\x5e\x3a\xc2\xc9\x87\xf8\x7e\x29\xb6\x5b\xb2\xbd\xa7\x62\x64\x5d\xd7\xd4\xa8\xd4\xfa\xf3\xeb\xf6\x97\x8f\xc8\xbc\xff\xf0\xb1\x43\x1b\x96\x6c\x4a\xbd\xb1\xc6\xdc\xfe\x32\x99\xd0\x23\x93\x1b\x85\xee\xaa\x3f\x14\x64\xaa\x6d\xa5\x7b\x8f\xd3\xb1\x0f\x4b\xf3\x23\xcf\x88\x81\x56\x31\x68\x20\x3a\x7e\x6a\x63\x78\x7f\x29\xc8\x72\xff\x5e\x91\x30\xd4\x80\x9a\x89\x71\x77\xfb\x23\x00\x00\xff\xff\x38\x2e\xcb\x39\x55\x1b\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
