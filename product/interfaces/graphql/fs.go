// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\xcd\x6e\x1b\x37\x10\x3e\x57\x4f\x41\xa9\x17\x07\x30\xf2\x00\xba\xc9\x4a\xd2\x1a\x89\x1a\x37\x52\x73\x09\x02\x81\xe6\x8e\x56\x84\xb9\xe4\x96\x1c\xda\x5e\x14\x7d\xf7\x82\x5c\xae\xb4\x3f\xe4\xae\x8c\x9e\x0c\x58\x27\x69\xe6\x9b\x1f\xce\xbf\xb8\x44\xd0\x07\xca\x80\xac\x55\x51\x80\x66\xb0\xbf\xd3\x2a\xb3\x0c\xc9\x3f\x33\x42\x08\xc1\xaa\x84\x25\xd9\xa2\xe6\x32\x9f\x7b\x4a\x41\xf5\x03\xe0\x9d\xa0\x0c\xd6\x2a\xeb\x31\x79\x06\x12\xf9\x81\x83\xee\x09\x41\xc6\xe9\x72\x60\x64\xbf\x71\xf4\xf9\xb5\xc7\x94\x9a\x33\x88\x60\xee\x1c\xfd\x56\x1e\x54\xc0\x21\x47\xd1\x33\xcb\x28\x42\xae\x34\x07\x13\x91\x5f\x9f\x98\x35\x38\x03\xc3\x34\x2f\x91\x2b\xd9\xd5\x62\x8e\x4a\xe3\x87\x14\xb7\x00\x8c\xbf\x00\x69\x0d\x10\xaa\xa2\x02\xab\x08\xe6\x4b\xcd\xa9\x61\x14\x51\xf3\x7b\x8b\x51\x5f\x57\x27\xe6\x7c\xf6\xef\x6c\x36\x73\xe1\x1f\xa2\xb6\xbc\x28\x05\x34\x89\xf2\x3f\x0a\x90\x68\xde\x92\xf8\x8a\x92\xb8\x56\xf2\xc0\x73\xab\xe9\xfd\x5b\x2a\x5f\x45\x2a\x1d\xf8\x91\x6a\x4e\x9d\x2f\x5b\x10\xc0\xdc\x17\xb3\x24\x3f\x06\x62\xdf\x07\xb0\xf9\xcf\x91\x52\x58\x31\xe4\x8f\xe0\x85\x24\xbe\xd5\xc2\x6b\xaa\x05\x89\x9b\xb1\x98\xff\x9f\x7a\xf1\x0e\x9d\x2b\x63\x5a\xcb\x2a\x01\xae\x6b\x2f\x5e\x7a\x43\x74\x28\x2e\x36\x78\x8b\xa0\xf7\x20\xba\x24\x55\xbe\xe0\x49\xfb\xaf\x1e\x3d\xe2\x4c\xea\x01\xc1\xa5\x53\x76\xbe\xa4\x3c\xe9\x31\x5e\xf0\xea\xe0\x5c\xb0\x14\x79\xaa\x41\x8a\xb1\x0e\x48\xaa\xda\x3a\x81\x8b\x2a\xe5\xda\x39\x0a\xd2\x16\x2f\xd5\x1e\xbc\x5d\xad\x77\xb7\xdf\x3f\xfa\xaf\x9b\xd5\x6e\xfd\xbb\xff\xf6\xc7\xd7\x7d\xfd\x23\x19\x84\x73\xef\x05\x3d\x05\xe5\x32\xdd\xa3\xd5\x0e\xa8\x01\x1d\x1a\x45\x88\x25\x21\x91\xb4\xf7\xc0\x23\xc9\x76\xcd\x19\x0c\x3f\x40\xf5\xa4\x74\x66\x96\xbf\xb8\x5f\x3f\x42\x58\x46\x64\x43\xd3\x06\xf1\x30\x9c\xfc\x27\x05\x3d\x4f\x2a\x2f\x02\x54\x4b\x2e\xf3\xe5\xa8\xc8\xc7\x1a\xe4\x85\xa6\x5c\x39\xeb\x4f\x0e\xe7\x0c\x0e\xd4\x0a\xec\x44\x98\xb3\x50\x22\xdc\x7c\xe0\x86\x29\x2b\x11\xb2\x25\xb9\x51\x4a\x00\x95\x41\xae\xc5\x88\x89\x36\xfc\x1d\x3c\x63\x6f\x2c\x72\x79\xa7\xb8\x44\xb3\x53\xdb\x12\x24\x2e\xc9\x27\xa1\x28\x36\xbb\xe2\x39\xcd\x64\x4a\xa2\x57\x17\x9f\xf8\xeb\x9a\xed\x3b\x6c\x11\x22\xd0\x8a\x96\x9b\xd6\x4f\x86\xe0\x11\x7c\x18\x08\x95\x99\xff\x51\x7a\x7b\x3e\xf8\x90\x2d\x26\x02\xda\xd6\x57\x87\x74\xb1\x6b\x14\xaa\x83\xd7\x37\xb4\x7c\x4d\xe0\x7d\xfe\x9e\x6c\xb8\x00\xb3\x92\xd9\x46\x69\x58\x24\xd2\xe1\xb5\x3d\x52\x61\x47\xd5\x31\xab\x35\x48\x56\x11\x46\x25\xb9\x87\x5a\x7d\x78\x87\xd2\xa4\x70\x86\x16\xe3\xe9\x4d\x96\x4e\x3b\x94\xcd\xd4\xb5\x06\x55\x01\xfa\x37\xad\x6c\xd9\xdb\xa3\x47\x2a\x25\x88\xe1\x8e\x11\x8a\xd1\xf6\xd2\x1d\xe9\xb8\x8c\x37\x2d\xe7\x1b\x78\xd8\xbe\x1e\x72\x8b\x50\x84\xfd\x93\x03\x7a\xd2\x95\x35\x34\x3f\xdb\x78\x97\x3a\x17\xbc\xe8\x84\x07\x0e\xd3\x69\x12\xff\xe9\xd6\x6d\x01\xbb\x9a\xd5\x26\x07\x1f\xfa\xe8\x70\x73\xf4\xc9\x1a\x0e\xe0\x52\x77\x49\x64\xce\xab\xbd\xbf\x6a\x3e\x43\xe5\xd6\xdb\x69\x24\xf5\xaf\x84\xc8\x16\x6e\xb8\x01\x7d\xa4\xe6\x44\xba\x7a\x80\xaa\x1d\xc4\xd0\xe7\x4d\xa8\x93\xb8\xb4\x91\x81\xa8\xb9\xa9\x3e\x43\xe5\x14\xb4\xfd\x7e\x37\xe5\xe9\x74\x68\x92\x77\x81\xa3\x44\x36\x72\x64\x87\x5a\xc9\x31\x76\x23\x09\x0b\x9d\x20\x4f\xad\xac\xb0\x5d\x92\x1e\x95\x14\x8f\x5d\x8a\xa4\xc5\x00\xa3\xfd\xd0\x9b\xb0\x31\xd1\xbd\xad\xe9\x94\xe8\xff\x89\x11\x3e\x31\xc1\xeb\xfb\xef\x86\x1a\xe8\x8c\xe7\x33\x79\x55\x38\xc1\x04\xf3\x2f\xc9\x4f\xfa\xd2\x5b\x26\x5c\xe9\x45\x49\x79\x2e\xbf\x59\x01\x83\x82\xcf\x40\x56\x6e\x94\x36\xc2\xa6\x2b\xfb\xeb\xe5\x1b\xa3\x6e\x58\xfa\xbc\x16\xd4\x98\x0b\x1a\x73\x0b\x54\xb3\xe3\x37\x30\x56\xe0\x69\xdb\x7b\x56\xac\xf7\x82\xbb\x07\xca\xa0\xcb\xaf\xd5\xec\x3f\x39\xc6\xfc\x67\x38\xe8\x6c\x9e\x83\x19\xdc\xaf\x01\xba\x3d\x71\x83\x52\xe3\xe9\x9b\xee\x1f\x8d\x00\x3e\xff\xcf\x38\x52\x53\x5f\x6a\x90\x79\x63\xad\x55\xee\x6e\xbc\x67\x04\xb7\x0a\xdd\x53\xff\xb4\xa0\x9b\x03\xa6\xff\x8e\xab\xd4\xff\xb8\xeb\x89\x53\x32\x32\x2a\xa2\x06\x82\xe3\x57\x26\x84\xf7\x6f\x0b\x06\x87\xef\x0a\x8c\xd8\x00\x6a\x27\xc6\xbd\xed\xbf\x00\x00\x00\xff\xff\x7d\x5c\xe6\x6c\x49\x14\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
