// Code generated by go-bindata. (@generated) DO NOT EDIT.

// Package graphql generated by go-bindata.// sources:
// schema.graphql
package graphql

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _schemaGraphql = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x57\x5f\x6f\xdb\x36\x10\x7f\x9e\x3f\x05\xed\xbd\xa4\x40\xd0\x0f\xe0\x37\xc7\x6b\xb7\xa0\xf5\x9a\xd5\x5e\x5f\x8a\xc2\xb8\x50\x67\x99\x08\x45\x6a\xe4\x29\x8d\x30\xec\xbb\x0f\xa4\x28\x5b\x7f\x48\x2b\xc1\x80\xf5\x25\x7a\x92\xee\x7e\x77\x3c\xde\x7f\x09\x45\x68\x0e\xc0\x91\xad\x75\x51\xa0\xe1\xb8\xbf\x33\x3a\xab\x38\xb1\xbf\x67\x8c\x31\x46\x75\x89\x4b\xb6\x25\x23\x54\x3e\xf7\x94\x02\xcc\x03\xd2\x9d\x04\x8e\x6b\x9d\x0d\x99\x98\x09\x58\x8e\x94\xed\x37\x8e\x3e\xbf\xf6\x98\xd2\x08\x8e\x11\xcc\x9d\xa3\xdf\xaa\x83\x0e\x38\x12\x24\x07\xea\x39\x10\xe6\xda\x08\xb4\x11\xf9\xf5\x89\xd9\x80\x33\xb4\xdc\x88\x92\x84\x56\x43\x23\x29\x6e\x23\x41\x03\x90\xba\x06\x49\x75\x04\xf3\xb1\xe1\x34\x30\x20\x32\xe2\xbe\xa2\xa8\x35\xab\x13\x73\x3e\xfb\x67\x36\x9b\x39\x47\x8e\x51\x5b\x51\x94\x12\x5b\x97\xfb\x8f\x02\x15\xd9\xd7\x70\xfc\x90\x70\xac\xb5\x3a\x88\xbc\x32\x70\xff\x1a\x94\xff\x39\x28\x0e\xfc\x08\x46\x80\xb3\x65\x8b\x12\xb9\x7b\xb1\x4b\xf6\x75\x24\xf6\x65\x04\x9b\x7f\xbb\x10\xd4\x15\x27\xf1\x88\x5e\x48\xd1\x6b\x54\x7f\x4c\x54\x15\x6d\x2e\x79\xef\xbf\x44\xde\x1b\x74\x8e\xf1\xb4\x96\x55\x02\xdc\x64\x51\x3c\x89\xc6\xe8\x90\x26\x7c\x74\x17\x09\xf7\x28\xfb\x24\x5d\xbe\xe0\x4a\xfb\x4f\x1e\x7d\xc1\x98\xd4\x05\x82\x49\xa7\xe8\x7c\x4c\x59\x32\x60\xbc\xe0\xd6\xc1\xb8\x97\x5c\xde\x12\x50\x2c\xeb\x93\xca\xb7\x4e\xe0\x59\xb9\x73\xed\x4c\x47\x55\x15\x2f\xd5\x1e\xec\x5f\xad\x77\xb7\x5f\xde\xf9\xd7\xcd\x6a\xb7\xfe\xcd\xbf\xfd\xfe\x69\xdf\x7c\x24\xdd\x72\xae\xb7\xa0\xa7\x00\xa1\xd2\x75\x59\xef\x10\x2c\x9a\x50\x3a\x52\x2e\x19\x8b\x24\xc2\x00\x7c\x21\xfc\xae\x5c\xc3\xc1\x0f\x58\x7f\xd7\x26\xb3\xcb\x9f\xdc\xd7\xd7\xe0\x96\x0b\xb2\xa1\x8c\x83\x78\x68\x48\xfe\x49\x41\x3b\xdd\xc9\xcb\x20\x18\x25\x54\xbe\xbc\x28\xf3\xae\x01\x35\x52\x53\xc6\x9c\x4f\x48\xb6\xde\x0c\x0f\x50\x49\xea\xf9\x58\xf0\x90\x24\xc2\xfe\x22\x2c\xd7\x95\x22\xcc\x96\xec\x46\x6b\x89\xa0\x82\x5c\x87\x11\x13\x6d\xf9\x3b\x7c\xa2\x41\xab\x14\xea\x4e\x0b\x45\x76\xa7\xb7\x25\x2a\x5a\xb2\xf7\x52\x03\xb5\x93\xe0\x29\xcd\xe4\x5a\x91\x57\x17\xef\xf3\xeb\x86\xed\xdd\xb2\x08\x1e\xe8\xb8\x8b\xd9\xa3\xfe\x6e\x19\x1d\xd1\xbb\x81\x81\xca\xfc\x47\xe9\xcf\xf3\xde\xc7\x6c\x31\xe1\xd0\xae\xbe\xc6\xa5\x8b\x5d\xab\x50\x1f\xbc\xbe\xf1\xc9\xd7\x0c\xdf\xe6\x6f\xd9\x46\x48\xb4\x2b\x95\x6d\xb4\xc1\x45\x22\x1c\x5e\xdb\x23\xc8\xea\xa2\x3a\x5e\x19\x83\x8a\xd7\x8c\x83\x62\xf7\xd8\xa8\x0f\xf7\xd0\x86\x15\xee\xa0\xc5\xe5\xf0\x26\x53\xa7\xeb\xca\xb6\x19\x55\x96\x74\x81\xe6\x57\xa3\xab\x72\x30\x3d\x8f\xa0\x14\xca\xf1\xdc\x91\x9a\x43\x77\xd4\x5e\xa8\xb9\x4c\xb4\x45\xe7\x4b\x78\x5c\xc0\x1e\x72\x4b\x58\x84\x99\x94\x23\x79\xd2\x55\x65\x21\x3f\x9f\xf1\x26\xb5\x24\x78\xd1\x09\x0b\x1c\xa6\x57\x24\xfe\xe9\xe7\x6d\x81\xbb\x86\xd5\x25\x07\x1b\x86\xe8\xb0\x69\x0c\xc9\x06\x0f\xe8\x42\xf7\x1c\xcf\x9c\xc7\xfd\x70\xfc\x7c\xc0\xda\x8d\xbc\x53\x53\x1a\x6e\x0e\x91\xc9\xdc\x72\x03\xfa\x08\xf6\x44\xba\x7a\xc0\xba\xeb\xc4\x50\xe7\xad\xab\x93\xb8\xf4\x21\x23\x51\x7b\x53\x7f\xc0\xda\x29\xe8\xda\xfd\x66\xca\xd2\x69\xd7\x24\xc7\xa5\xa3\x44\xa6\x74\x64\x8a\x56\x4a\x50\x6c\x6f\x92\x15\xf6\x9c\x3c\x35\xb4\xc2\x7c\x49\x5a\x54\x02\x1d\xfb\x14\x05\xc5\x08\x63\x7c\xd3\x9b\x38\x63\xa2\x7a\x3b\xdd\x29\x51\xff\x13\x2d\x7c\xa2\x83\x37\x3b\xe1\x0d\x58\xec\xb5\xe7\x33\x79\x55\x38\xc1\x04\xf3\x4f\x25\x4e\xfa\xd2\x53\x26\xec\xe6\x45\x09\x22\x57\x9f\x2b\x89\xa3\x84\xcf\x50\xd5\xae\x95\xb6\xc2\xb6\x2f\xfb\xf3\xf3\x27\x46\x53\xb0\xf0\xb4\x96\x60\xed\x33\x0a\x73\x8b\x60\xf8\xf1\x33\xda\x4a\xd2\x69\xde\x7b\x56\xac\xf6\x82\xb9\x07\xe0\xd8\xe7\x37\x6a\xf6\xef\x1d\x63\xfe\x2d\xac\x74\x55\x9e\xa3\x1d\xed\xb4\x01\xba\x3d\x71\x83\x52\xeb\xe9\x9b\xfe\xcf\x47\x00\x9f\xff\x3d\x8e\x60\x9b\x5d\x0d\x33\x7f\x58\x67\x94\xbb\x2d\xef\x89\xd0\x8d\x42\x77\xd5\x3f\x2a\x34\xed\x0a\x33\xbc\xc7\x55\xea\x2f\xed\x7a\x62\x99\x8c\xb4\x8a\xe8\x01\xc1\xf0\x2b\x1b\xdc\xfb\x57\x85\x96\xc6\xf7\x0a\x8c\x58\x03\xea\x06\xc6\xdd\xed\xdf\x00\x00\x00\xff\xff\x69\x36\x12\x91\x85\x13\x00\x00")

func schemaGraphqlBytes() ([]byte, error) {
	return bindataRead(
		_schemaGraphql,
		"schema.graphql",
	)
}

func schemaGraphql() (*asset, error) {
	bytes, err := schemaGraphqlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "schema.graphql", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"schema.graphql": schemaGraphql,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("nonexistent") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"schema.graphql": &bintree{schemaGraphql, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
